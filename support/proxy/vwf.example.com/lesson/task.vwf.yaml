# Copyright 2012 United States Government, as represented by the Secretary of Defense, Under
# Secretary of Defense (Personnel & Readiness).
# 
# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
# in compliance with the License. You may obtain a copy of the License at
# 
#   http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software distributed under the License
# is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
# or implied. See the License for the specific language governing permissions and limitations under
# the License.

--- 
extends: http://vwf.example.com/node.vwf
properties:

  ## Text to display to the user to explain the task
  ## 
  ## @name task.vwf#text
  ## @property

  text:

  ## The search string used to find a node3 that represents the transform that the camera will move to at the 
  ## beginning of this task
  ## 
  ## @name task.vwf#cameraPoseRef
  ## @property

  cameraPoseRef:

methods:

  # ## Method to step to the next task
  # ## 
  # ## @name task.vwf#next
  # ## @function

  # next:

  # ## Method to step to the previous task
  # ## 
  # ## @name task.vwf#previous
  # ## @function

  # previous:

events:

  ## Event fired on the task to let it know that it is beginning
  ## 
  ## @name task.vwf#enter
  ## @function

  enter:

  ## Event fired from the task to let others know that it is beginning
  ## 
  ## @name task.vwf#entering
  ## @event

  entering:

  ## Event fired by the task to signify that its completion criteria has been met
  ## 
  ## @name task.vwf#completed
  ## @event

  completed:

  ## Event fired on the task to let it and others know that it is ending
  ## 
  ## @name task.vwf#exiting
  ## @event

  exiting:

scripts:
- |
  this.subtasks;
  this.taskIndex;

  this.enter = function() {
    this.in(0).entering();
  }

  this.entering = function() {

    // If a camera pose has been specified for this task, move the camera to it
    if ( this.cameraPoseRef ) {
      var cameraPoseSearchResults = this.find( this.cameraPoseRef );
      if ( cameraPoseSearchResults && cameraPoseSearchResults.length ) {
        var newCameraPose = cameraPoseSearchResults[ 0 ];
        if ( newCameraPose.translation && newCameraPose.quaternion ) {
          var scene = this.find( "/" )[ 0 ];
          var camera = scene.camera;
          if ( camera ) {
            var duration = 2;
            camera.transformTo( newCameraPose.transform, duration);
          }
          else
            console.error( "Could not find camera - make sure the scene derives from navScene.vwf or another " +
                           "component that defines a valid camera" );
        }
        else
          console.error( "Camera pose '" + this.cameraPoseRef + "' is not a valid node3" );
      }
      else
        console.error( "Could not find camera pose: " + this.cameraPoseRef + " - will not move camera" );
    }

    // Find children that are tasks
    this.subtasks = this.find( "./element(*,'http://vwf.example.com/lesson/task.vwf')" )

    if ( this.subtasks && this.subtasks.length ) {
      this.taskIndex = 0;
      this.dispatchSubtask();
    }
  }

  this.dispatchSubtask = function() {
    var self = this;
    var subtask = this.subtasks[ this.taskIndex ];
    subtask.enter();
    subtask.completed = subtask.events.add( function() {

      // TODO: Do deferred complete here

      // Remove event handlers from the subtask that just completed
      subtask.completed = subtask.events.flush( self );

      // Notify the subtask (and others) that it is exiting
      subtask.exiting();

      // Dispatch the next subtask or complete
      self.taskIndex++;
      if ( self.taskIndex < self.subtasks.length )
        self.dispatchSubtask();
      else
        self.completed();
    }, this );
  } //@ sourceURL=task.vwf
