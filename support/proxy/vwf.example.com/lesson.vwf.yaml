# Copyright 2012 United States Government, as represented by the Secretary of Defense, Under
# Secretary of Defense (Personnel & Readiness).
# 
# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
# in compliance with the License. You may obtain a copy of the License at
# 
#   http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software distributed under the License
# is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
# or implied. See the License for the specific language governing permissions and limitations under
# the License.

## The component representation of a lesson
## 
## @name lesson.vwf
## @namespace

--- 
extends: http://vwf.example.com/node.vwf
properties: 

  ## Index value for the instruction
  ## 
  ## @name lesson.vwf#instructionIndex
  ## @property

  instructionIndex: 0

methods:

  ## Method to start the lesson
  ## 
  ## @name lesson.vwf#begin
  ## @function
  ##
  ## @returns undefined

  begin:

events:

  ## The event that is fired when the user has completed the lesson
  ## 
  ## @name instruction.vwf#completed
  ## @event

  completed:

scripts:
- |
    var self = this;
    var instructions = [];
    var activeInstruction;

    this.initialize = function() {
      
      // If this lesson has no children (no instructions), warn the user and return
      if ( !this.children ) {
        console.warn( "This lesson has no instructions - add some as children to be able to use it");
        return;
      }

      // Build an array of instructions out of this lesson's children which are of type "instruction" 
      for ( var i = 0; i < this.children.length; i++ ) {
        var potentialInstruction = this.children[ i ];

        // TODO: Does the following work?

        if ( potentialInstruction.type == "http://vwf.example.com/instruction.vwf" )
          instructions.push( potentialInstruction );
      }

      // Now that we have run through all the children, check to see if any of them were instructions.  If not,
      // warn the user
      if ( instructions.length == 0 )
        console.warn( "This lesson has no instructions - add some as children to be able to use it");
    }

    this.begin = function() {
      if ( instructions && instructions.length ) {
        this.instructionIndex = 0;
        this.activateInstruction();
      }
    }

    this.activateInstruction = function() {
      if ( activeInstruction )
        activeInstruction.exited = undefined;
      activeInstruction = this.instructions[ this.instructionIndex ];
      activeInstruction.exited = this.activateNext;
      activeInstruction.begin();
    }

    this.activateNext = function() {
      self.instructionIndex++;
      if ( self.instructionIndex < self.instructions.length )
        self.activateInstruction();
      else
        self.completed();
    } //@ sourceURL=lesson.vwf
