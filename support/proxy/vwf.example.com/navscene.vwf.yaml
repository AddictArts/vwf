--- 
extends: http://vwf.example.com/scene.vwf
properties: 
  navmode:
    set: |
      //console.info( "   navmode.set( "+value+" )" );
      switch ( value ) {
        case "walk":
        case "orbit":
        case "none":
          if ( this.setNavMode ) {
            this.setNavMode( value );
          }
          this.navmode = value;
          break;
      }
    value: "walk"
  orbitRadius: -1  
  orbitObjectID: "http-vwf-example-com-node3-vwf-sceneCenter"
  speed: 2.0
  maxSpeed: 500
  dragModeMove: false
events:
  keyUp:
  keyDown:
  pointerDown:
  pointerUp:
  pointerMove:
  pointerLeave:
  pointerWheel:
methods:
  update:
  getCameraAt:  
scripts:
- text: |
    var counter = 1;
    var _piDiv180 = Math.PI / 180;
    var _180DivPI = 180 / Math.PI;
    var _2PI = 2 * Math.PI;
    var _85 = 85.0 * _piDiv180;
    var _10 = 10.0 * _piDiv180;
    var phi, theta;
    var positionChanged = false;
    this.initialize = function() {
      console.info( "== initialize == navscene == initialize ==" );
      this.input = { 
        futureActive: function() {
          return ( this.lookActive || this.moveActive || this.button1Down || this.button2Down || this.keysAreDown() ); 
        },
        timeSinceLastEvent: function() { return this.time - this.pointerEventTime; },
        timeSinceDownEvent: function() { return this.time - this.pointerDownTime; },
        pointerDelta: function() { 
          if ( this.pointerInfo && this.lastPointerInfo ) {
            return [ this.lastPointerInfo.position[0] - this.pointerInfo.position[0],
                     this.lastPointerInfo.position[1] - this.pointerInfo.position[1] 
                   ];
          }
          return undefined;
        },        
        keysAreDown: function() { return ( this.keyInfo && Object.keys( this.keyInfo.keysDown ).length > 0 ); },
        keyInfo: undefined,
        pointerInfo: undefined,
        lastPointerInfo: undefined,
        pickInfo: undefined,
        lastPickInfo: undefined,        
        pointerDownTime: undefined,
        pointerEventTime: undefined,
        lookActive: false, 
        moveActive: false, 
        look: [ 0, 0 ],
        move: [ 0, 0 ],
        button1Down: false,
        button2Down: false,
        turnLeftDown: false,
        turnRightDown: false,
        lastUpdateTime: undefined,
      };
      this.originalSpeed = this.speed;
      this.setNavMode( this.navmode );
    }
    this.setNavMode = function( mode ) {
      if (!this.activeCameraComp) {
        this.getActiveCamera();
      }
      if ( this.activeCameraComp ) {
        switch( mode ) {
          case "orbit":
            this.activeCameraComp.lookAt = this.orbitObjectID;
            this.updateRadius();
            break;
          default:
            this.activeCameraComp.lookAt = "";
            break;
        }
      }
    }
    this.changeNavMode = function( state ) {
      //console.info( "   this.changeNavMode( "+state+" )" );
      if ( state == 1 ) {
        //console.info( "         this.navmode = " + this.navmode );
        if ( this.navmode == "walk" ) this.navmode = "orbit";
        else if ( this.navmode == "orbit" ) this.navmode = "walk"; 
      }
    }
    this.raiseOrZoomIn = function( state ) {
      var active = this.input.futureActive();
      if ( this.navMode == "walk" ) {
        this.cameraZ( 1.0 );
      } else if ( this.navMode == "orbit" ) {
        this.zoom( true );
      }     
      this.input.button1Down = state;
      if ( state && !active ) {
         this.future( 0.1 ).update();
      }
    }
    this.lowerOrZoomOut = function( state ) {
      var active = this.input.futureActive();
      if ( this.navMode == "walk" ) {
        this.cameraZ( -1.0 );
      } else if ( this.navMode == "orbit" ) {
        this.zoom( false );
      }      
      this.input.button2Down = state;
      if ( state && !active ) {
         this.future( 0.1 ).update();
      }      
    }
    this.pointerIsDown = function() {
      //console.info( "this.input.pointerInfo " + this.input.pointerInfo );
      if ( this.input && this.input.pointerInfo ) {
        var bInfo = this.input.pointerInfo.buttons;
        if ( bInfo ) {
          return bInfo.left || bInfo.right || bInfo.middle;        
        }
      }
      return false;
    }        
    this.pointerDown = function( parms, pickInfo ){
      //console.info( " navscene.pointerDown( "+parms.position[0]+", "+parms.position[1]+" )" );
      this.input.lastPointerInfo = undefined;
      this.input.pointerInfo = parms;
      this.input.lastPickInfo = undefined;
      this.input.pickInfo = pickInfo;      
      this.input.pointerDownTime = this.time;
    }
    this.pointerUp = function( parms, pickInfo ){
      //console.info( " navscene.pointerUp( "+parms.position[0]+", "+parms.position[1]+" )" );
      this.input.lastPointerInfo = this.input.pointerInfo;
      this.input.pointerInfo = undefined;
      this.input.lastPickInfo = this.input.pickInfo;
      this.input.pickInfo = undefined;            
    }
    this.pointerMove = function( parms, pickInfo ){
      this.input.pointerEventTime = this.time;
      this.input.lastPointerInfo = this.input.pointerInfo;
      this.input.pointerInfo = parms;
      this.input.lastPickInfo = this.input.pickInfo;
      this.input.pickInfo = pickInfo;      
      //console.info( " navscene.pointerMove( "+parms.position[0]+", "+parms.position[1]+" )" );
      if ( this.pointerIsDown() /* && this.input.pointerEventTime - this.input.pointerDownTime > 6 */ ) {
        var active = this.input.futureActive();
        var delta = this.input.pointerDelta();
        var valid = false;
        if ( delta ) {
          switch( this.navmode ) {
            case "orbit":
              this.orbit( delta[0], delta[1] );
              valid = true;
              break;          
            case "walk":
              if ( this.dragModeMove )
                this.move( (parms.position[0]*2.0)-1, (parms.position[1]*2.0)-1 );
              else
                this.look( (parms.position[0]*2.0)-1, (parms.position[1]*2.0)-1 );
              valid = true;
              break;
          }
          if ( valid && !active ) {
            this.future( 0.1 ).update();
          }
        }
      }    
    }
    this.pointerLeave = function( parms ){
      this.input.lastPointerInfo = this.input.pointerInfo;
      this.input.pointerInfo = undefined;
      this.input.lastPickInfo = this.input.pickInfo;
      this.input.pickInfo = undefined;              
    }
    this.pointerWheel = function( parms, pickInfo ) {
      this.input.pointerEventTime = this.time;

      this.input.lastPointerInfo = this.input.pointerInfo;
      this.input.pointerInfo = parms;      
      this.input.lastPickInfo = this.input.pickInfo;
      this.input.pickInfo = pickInfo;

      if (!this.activeCameraComp) {
        this.getActiveCamera();
      }
      if ( this.activeCameraComp ) {
        var cameraPos = this.activeCameraComp.translation;
        var cameraAt = this.getCameraAt();
        
        var yinc = 0;
        var xinc = 0;
        var zinc = 0;

        goog.vec.Vec3.normalize( cameraAt, cameraAt );

        var mult = 0;
        if ( this.input.pickInfo.wheel.deltaY ) {
          mult = Math.abs( this.input.pickInfo.wheel.deltaY / 20 );
          if ( this.input.pickInfo.wheel.deltaY < 0 ) {
            // backwards
            yinc = yinc - parseFloat( cameraAt[1] ); 
            xinc = xinc - parseFloat( cameraAt[0] );
            zinc = zinc - parseFloat( cameraAt[2] );
          } else if ( this.input.pickInfo.wheel.deltaY > 0 ) {
            //forward
            yinc = yinc + parseFloat( cameraAt[1] ); 
            xinc = xinc + parseFloat( cameraAt[0] );
            zinc = zinc + parseFloat( cameraAt[2] );
          }
        }
        if ( this.orbitRadius == -1 || this.input.pointerEventTime - this.input.lastUpdateTime > 500 ) {
          this.updateRadius();
        }
        if ( xinc != 0 || yinc != 0 ) {
          var x, y, z;
        
          x = cameraPos[0] + xinc * this.speed * mult;
          y = cameraPos[1] + yinc * this.speed * mult;

          if ( this.lookAt != "" ) {
            z = cameraPos[2] + zinc * this.speed * mult;
          } else {
            z = cameraPos[2];
            var ratioHR = camerapos[2] / this.orbitRadius;
            zinc = Math.sqrt( Math.pow( x-cameraPos[0], 2 ) + Math.pow( y-cameraPos[1], 2 ) ) * ratioHR;
            if ( this.input.pickInfo.wheel.deltaY > 0 ) zinc *= -1;
            z = cameraPos[2] + zinc;
          }

          this.activeCameraComp.translation = [ x, y, z ];
          positionChanged = true;
        }
      }
    }
    this.keyDown = function( parms ) {
      var active = this.input.futureActive();
      this.input.keyInfo = parms;
      this.handleKeyDown();
      if ( !active ) {
        this.future( 0.1 ).update();
      }
    }
    this.keyUp = function( parms ) {
      this.input.keyInfo = parms;
    }
    this.handleKeyDown = function() {
      if (!this.activeCameraComp) {
        this.getActiveCamera();
      }      
      if ( this.activeCameraComp ) {

        var deltaZ = 0;
        var kd = this.input.keyInfo.keysDown;

        this.input.look = [ 0, 0 ];
        this.input.move = [ 0, 0 ];
        
        for ( keyPress in kd ) {
          switch ( Number( kd[ keyPress ].code ) ) {
            case 87:  //w
            case 38:  //up
              this.input.move[1] += 1;
              break;
            case 83:  //s
            case 40:  //down
              this.input.move[1] += -1;
              break;
            case 37: // left              
            case 65:  //a
              this.input.move[0] += -1;
              break;
            case 39: // right              
            case 68:  //d
              this.input.move[0] += 1;
              break;
            case 81: // q
              this.input.look[0] += -1;
              break;
            case 69: // e
              this.input.look[0] += 1;
              break;
            case 90: // z
              console.info( "translation: [ " + Array.prototype.slice.call( this.activeCameraComp.translation ) + " ]" );
              console.info( " quaternion: [ " + Array.prototype.slice.call( this.activeCameraComp.quaternion ) + " ]" );              
              console.info( "   rotation: [ " + Array.prototype.slice.call( this.activeCameraComp.rotation ) + " ]" );
              console.info( "  transform: [ " + Array.prototype.slice.call( this.activeCameraComp.transform )  + " ]" );
              break;
            case 88: // x
              break;
            case 82: // r
              deltaZ += 1.0;
              break;
            case 67: // c
              deltaZ += - 1.0;
              break;
            default:
              break;
          }
        }
        
        if ( this.input.look[0] != 0 || this.input.look[1] != 0 ) {
          this.look( this.input.look[0], this.input.look[1] );
        }
        if ( this.input.move[0] != 0 || this.input.move[1] != 0 ) {
          this.move( this.input.move[0], this.input.move[1] );
        }
        if ( deltaZ != 0 ) {
          if ( this.navmode == "walk" ) {
            this.cameraZ( deltaZ );
          }
        }
         
      } 
    }

    this.onMove = function( x, y ) {
      //console.info( "START navscene.onMove( " + x + ", " + y + " )" );
      if ( Math.abs( x ) < 0.1 && Math.abs( y ) < 0.1 ) {
        if ( this.input.moveActive ) {
          //console.info( "--   DEACTIVATE MOVE ---------------------------------------" );
          this.input.moveActive = false;
          this.input.move = [ 0, 0 ];
        }
        return; 
      }
      //console.info( "   1   navscene.onMove( " + x + ", " + y + " )" );
      this.input.move = [ x, y ];      
      var active = this.input.futureActive();
      if ( !this.input.moveActive ) {
        //console.info( "**   ACTIVATE MOVE ***************************************" );
        this.input.moveActive = true;
        this.move( x, y );
      }
      //console.info( "   2   navscene.onMove( " + x + ", " + y + " )" );
      //console.info( "   2   active = " + active );
      if ( !active ) {
        //console.info( "   2   this.future = " + this.future );
        //console.info( "this.update = " + this.update() );
        this.future( 0.1 ).update();
      }
      //console.info( "END   navscene.onMove( " + x + ", " + y + " )" );
    }    
    this.move = function( x, y ) {
      if ( this.navmode == "walk" ) {
        this.translate( x, y );
      } else if ( this.navmode == "orbit" ) {
        this.orbit( x * 0.1, y * 0.1 );
      }
    }
    this.onLook = function( x, y ) {
      if ( Math.abs( x ) < 0.1 && Math.abs( y ) < 0.1 ) {
        if ( this.input.lookActive ) {
          //console.info( "--   DEACTIVATE LOOK ---------------------------------------" );
          this.input.lookActive = false;
          this.input.look = [ 0, 0 ];  
        }        
        return; 
      }  
      this.input.look = [ x, y ];
      var active = this.input.futureActive();
      if ( !this.input.lookActive ) {
        //console.info( "**   ACTIVATE LOOK ***************************************" );
        this.input.lookActive = true;
        this.look( x, y );
      }
      if ( !active ) {
        this.future( 0.1 ).update();
      }
    }
    this.look = function( x, y ) {
      if (!this.activeCameraComp) 
        this.getActiveCamera();
      
      if ( this.activeCameraComp ) {
        var rot = this.getCameraAt();
        var quat = this.activeCameraComp.quaternion;
        var axis = goog.vec.Vec3.create();
        var angle = goog.vec.Quaternion.toAngleAxis( quat, axis );
        
        if ( this.navmode == "walk" ) {
          this.activeCameraComp.rotation = [ axis[0], axis[1], axis[2], angle - ( x*0.05 ) ]
        } 
      }
    }    
    this.zoom = function( dirIn ) {
      if (!this.activeCameraComp) {
        this.getActiveCamera();
      }
      if ( this.activeCameraComp ) {
        var camerapos = this.activeCameraComp.translation;
        var camerarot = this.getCameraAt();
        
        var yinc = 0;
        var xinc = 0;
        var zinc = 0;

        var speed = 1.0;
        if ( this.activeCameraComp.speed )
          speed = Number( this.activeCameraComp.speed );
        
        if ( !dirIn ) speed = -speed;
        yinc = yinc + parseFloat( camerarot[1] ) * speed; 
        xinc = xinc + parseFloat( camerarot[0] ) * speed;

        if ( this.orbitRadius == -1 || vwf.time() - this.input.lastUpdateTime > 500 ) {
          this.updateRadius();
        }
        
        if (xinc != 0 || yinc != 0 ) {
          var origX, origY, origZ;
          var x, y, z, atBounds = false;
          
          origX = camerapos[0];
          origY = camerapos[1];
          origZ = camerapos[2];
        
          x = origX + xinc * this.speed * mult;
          y = origY + yinc * this.speed * mult;
          z = origZ;

          var ratioHR = camerapos[2] / this.orbitRadius;
          zinc = Math.sqrt( Math.pow( x-origX, 2 ) + Math.pow( y-origY, 2 ) ) * ratioHR;
          if ( parms.wheelDeltaY > 0 ) zinc *= -1;
          z = origZ + zinc;
          
          console.info( "PRE  rotationMatrix = " + Array.prototype.slice.call( this.activeCameraComp.rotationMatrix ) );
          console.info( "   setting translation = [ " + x + ", " + y + ", " + z + " ]" );
          this.activeCameraComp.translation = [ x, y, z ];
          console.info( "POST rotationMatrix = " + Array.prototype.slice.call( this.activeCameraComp.rotationMatrix ) );
          positionChanged = true;
        }
      }
    }
    this.cameraZ = function( dir ) {
      if (!this.activeCameraComp) this.getActiveCamera();
      
      if ( this.activeCameraComp ) {
        var pos = this.activeCameraComp.translation;
        var speed = 1.0;
        if ( this.activeCameraComp.speed )
          speed = Number( this.activeCameraComp.speed );
        
        this.activeCameraComp.translation = [ pos[0], pos[1], pos[2] + ( speed * dir ) ];
      }
    }
    this.updateRadius = function() {
      var pos = this.activeCameraComp.translation;
      var oldRadius = this.orbitRadius;
      
      this.orbitRadius = Math.sqrt( (pos[0] * pos[0]) + (pos[1] * pos[1]) + (pos[2] * pos[2]) );
      var dist2D = Math.sqrt( (pos[0] * pos[0]) + (pos[1] * pos[1]) );
      
      phi = Math.acos( pos[2] / this.orbitRadius );
      if ( 0 <= pos[0] ) theta = Math.asin( pos[1]/dist2D );
      else theta = Math.PI - Math.asin( pos[1]/dist2D );
      
      if ( oldRadius != -1 ) {
        if ( this.orbitRadius > oldRadius )
          this.speed += ( this.orbitRadius - oldRadius ) * 0.006;
        else if ( this.orbitRadius < oldRadius )
          this.speed -= ( oldRadius - this.orbitRadius ) * 0.006;
        if ( this.speed > this.maxSpeed ) this.speed = this.maxSpeed;
        if ( this.speed < this.originalSpeed ) this.speed = this.originalSpeed;
      }
      this.input.lastUpdateTime = this.time;
    }    
    this.orbit = function( xDelta, yDelta ){
      //console.info( "this.orbit( "+xDelta+", "+ yDelta + " )" );
      if (!this.activeCameraComp) this.getActiveCamera();
      if ( this.activeCameraComp ) {
        this.updateRadius();
        
        var pixelToRadian = this.orbitRadius / ( this.speed * 1000.0 );
        var phiDelta = -yDelta * pixelToRadian * 0.5;
        var thetaDelta = -xDelta * pixelToRadian * 2.0;

        phi = phi - phiDelta;
        theta = theta - thetaDelta;
        
        if ( theta >= _2PI ) theta -= _2PI;
        else if ( theta < 0 ) theta += _2PI;

        if ( phi > _85 ) phi = _85;
        else if ( phi < _10 ) phi = _10;
          
        // Spherical to Cartesian
        var x = this.orbitRadius * Math.sin( phi ) * Math.cos( theta );
        var y = this.orbitRadius * Math.sin( phi ) * Math.sin( theta );
        var z = this.orbitRadius * Math.cos( phi );

        this.activeCameraComp.translation = [ x, y, z ];
      }
    }
    this.getCameraAt = function() {
      var camRotMat = this.activeCameraComp.rotationMatrix;
      return [ camRotMat[3], camRotMat[4], camRotMat[5] ];  
    }
    this.getCameraUp = function() {
      var camRotMat = this.activeCameraComp.rotationMatrix;
      return [ camRotMat[6], camRotMat[7], camRotMat[8] ];  
    }
    this.getCameraRight = function() {
      var camRotMat = this.activeCameraComp.rotationMatrix;
      return [ camRotMat[0], camRotMat[1], camRotMat[2] ];  
    }            
    this.getCameraVec = function( x, y, z ) {
        var camRotMat = this.activeCameraComp.rotationMatrix;
        var camAt = goog.vec.Mat4.multVec4(
          camRotMat,
          goog.vec.Vec4.createFromValues( x, y, z, 1 ),
          goog.vec.Vec3.create()
        );
        console.info( "   camRotMat = " + Array.prototype.slice.call( camRotMat ) );
        console.info( "   getCameraAt( "+x+", "+y+", "+z+" ) = " + Array.prototype.slice.call( camAt ) );
        return camAt;      
    }
    this.translate = function( x, y ) {
      if (!this.activeCameraComp) 
        this.getActiveCamera();

      if ( this.activeCameraComp ) {
        var trans = this.getCameraVec( x, y, 0 );
        trans[2] = 0;

        if ( goog.vec.Vec3.magnitudeSquared( trans ) > goog.vec.EPSILON ) {
          this.activeCameraComp.translation = goog.vec.Vec3.add(
            this.activeCameraComp.translation,
            goog.vec.Vec3.scale(
              goog.vec.Vec3.normalize( trans, trans ),
              this.speed,
              trans
            ),
            trans
          );
        }
      }      
    }
    this.update = function() {
      //console.info( "update   this.input + " + this.input );
      if ( this.input ) {
        var delta = this.input.pointerDelta();
        var pi = this.input.pointerInfo;
        //console.info( "update   delta = " + delta );
        if ( delta ) {
          if ( this.pointerIsDown() ) {
            if ( this.input.pointerInfo.buttons.left ) {
              var pi = this.input.pointerInfo;
              switch( this.navmode ) {
                case "orbit":
                  this.orbit( delta[0], delta[1] );
                  break;          
                case "walk":
                  if ( this.dragModeMove )
                    this.move( (pi.position[0]*2.0)-1,(pi.position[1]*2.0)-1 );
                  else
                    this.look( (pi.position[0]*2.0)-1,(pi.position[1]*2.0)-1 );
                  break;
              } 
            }
          }   
          if ( this.input.lookActive ) {
            this.look( (pi.position[0]*2.0)-1,(pi.position[1]*2.0)-1 );
          }
          if ( this.input.moveActive ) {
            this.move( (pi.position[0]*2.0)-1,(pi.position[1]*2.0)-1 );
          }
        }
        if ( this.input.keysAreDown() ) {
        this.handleKeyDown();
        }        
        if ( this.input.button1Down ) {
          if ( this.navMode == "walk" ) {
            this.cameraZ( 1.0 );
          } else if ( this.navMode == "orbit" ) {
            this.zoom( true );
          }     
        }    
        if ( this.input.button2Down ) {
          if ( this.navMode == "walk" ) {
            this.cameraZ( -1.0 );
          } else if ( this.navMode == "orbit" ) {
            this.zoom( false );
          }     
        }     
        if ( this.input.futureActive() ) {
          this.future( 0.1 ).update();
        }
      }	
    } //@ sourceURL=navScene.vwf

