( function( window ) {

    window.console && console.info && console.info( "loading vwf" );

    // vwf.js is the main Virtual World Framework manager. It is constructed as a JavaScript module
    // (http://www.yuiblog.com/blog/2007/06/12/module-pattern) to isolate it from the rest of the
    // page's JavaScript environment. The vwf module self-creates its own instance when loaded and
    // attaches to the global window object as window.vwf. Nothing else should affect the global
    // environment.

    window.vwf = new function() {

        window.console && console.info && console.info( "creating vwf" );

        // == Public variables =====================================================================

        // Each model and view module loaded by the main page registers itself here.

        this.modules = [];

        // vwf.initialize() creates an instance of each model and view module configured on the main
        // page and attaches them here.

        this.models = [];
        this.views = [];

        // This is the simulation clock, which contains the current time in milliseconds. Time is
        // controlled by the conference server and updates here as we receive control messages.

        this.now = 0;

        // == Private variables ====================================================================

        this.private = {}; // for debugging

        // Components describe the objects that make up the simulation. They may also serve as
        // prototype objects for further derived components. External components are identified by
        // URIs. Once loaded, we save a mapping here from its URI to the node ID of its prototype so
        // that we can find it if it is reused. Components specified internally as object literals
        // are anonymous and are not indexed here.

        var types = this.private.types = {}; // maps URI => component specification

        // The proto-prototype of all nodes is "node", identified by this URI. This type is
        // intrinsic to the system and nothing is loaded from the URI.

        var nodeTypeURI = "http://vwf.example.com/types/node";

        // Control messages from the conference server are stored here in a priority queue, ordered
        // by execution time.

        var queue = this.private.queue = [];

        // This is the connection to the conference server. In this sample implementation, "socket"
        // is a socket.io client that communicates over a channel provided by the server hosting the
        // client documents.

        var socket = this.private.socket = undefined;

        // Cached version of window.location.search query parameters generated by getQueryString().

        var queryStringParams = this.private.queryStringParams = {};

        // Each node is assigned an ID as it is created. This is the most recent ID assigned.

        // Communication between the manager and the models and views uses these IDs to refer to the
        // nodes. The manager doesn't maintain any particular state for the nodes and knows them
        // only as their IDs. The models work in federation to provide the meaning to each node.

        // var lastID = 0;

        // Callback functions defined in this scope use this local "vwf" to locate the manager.

        var vwf = this;

//		this.classScripts = {};


        // == Public functions =====================================================================

        // -- initialize ---------------------------------------------------------------------------

        // The main page only needs to call vwf.initialize() to launch the world. initialize()
        // accepts three parameters.
        
        // A component specification identifies the world to be loaded. If a URI is provided, the
        // specification is loaded from there [1]. Alternately, a JavaScript object literal
        // containing the specfication may be provided [2]. Since a component can extend and
        // specialize a prototype, using a simple object literal allows existing component to be
        // configured for special uses [3].
        // 
        //     [1] vwf.initialize( "http://vwf.example.com/worlds/sample12345", ... )
        //
        //     [2] vwf.initialize( { source: "model.dae", type: "model/vnd.collada+xml",
        //             properties: { "p1": ... }, ... }, ... )
        //
        //     [3] vwf.initialize( { extends: "http://vwf.example.com/worlds/sample12345",
        //             source: "alternate-model.dae", type: "model/vnd.collada+xml" }, ... )
        // 
        // modelArguments and viewArguments identify the model and view modules that should be
        // attached to the simulation and provides their configuration parameters. Each argument set
        // is specified as an object (hash) in which each key is the name of a model or view to
        // construct, and the value is the set of arguments to pass to the constructor. The
        // arguments may be specified as an array of values [4], or as a single value if there is
        // only one [5].
        // 
        //     [4] vwf.initialize( ..., { scenejs: "#scene" }, { ... } )
        //     [5] vwf.initialize( ..., { ... }, { html: [ "#world", "second param" ] } )

        this.initialize = function( /* [ componentURI|componentObject ] [ modelArguments ]
            [ viewArguments ] */ ) {

            var args = Array.prototype.slice.call( arguments );

            // Get the world specification if one is provided in the query string. Parse it into a
            // world specification object if it's valid JSON, otherwise keep the query string and
            // assume it's a URI.

            var application = getQueryString( "application" ) || getQueryString( "world" ); // TODO: "world" is old; remove eventually

            // Parse the function parameters. If the first parameter is a string or contains
            // component properties, then treat it as the world specification. Otherwise, fall back
            // to the "application" parameter in the query string.

            if ( typeof args[0] == "string" || args[0] instanceof String || objectIsComponent( args[0] ) ) {
                application = args.shift();
            }

            // Shift off the parameter containing the model argument lists.

            var modelArgumentLists = args.shift() || {};

            if ( typeof modelArgumentLists != "object" && ! modelArgumentLists instanceof Object )
                modelArgumentLists = {};

            // Shift off the parameter containing the view argument lists.

            var viewArgumentLists = args.shift() || {};

            if ( typeof viewArgumentLists != "object" && ! viewArgumentLists instanceof Object )
                viewArgumentLists = {};

            // Register a callback with jQuery to be invoked when the HTML page has finished
            // loading.

            jQuery( window.document ).ready( function() {

                // Create and attach each configured model.

                jQuery.each( modelArgumentLists, function( modelName, modelArguments ) {

                    var model = vwf.modules[modelName];

                    if ( model ) {
                        var instance = new model();
                        model.apply( instance, [ vwf ].concat( modelArguments || [] ) );
                        vwf.models.push( instance );
                    }

                } );

                // Create and attach each configured view.

                jQuery.each( viewArgumentLists, function( viewName, viewArguments ) {

                    var view = vwf.modules[viewName];

                    if ( view ) {
                        var instance = new view();
                        view.apply( instance, [ vwf ].concat( viewArguments || [] ) );
                        vwf.views.push( instance );
                    }

                } );

                // Load the world.

                vwf.ready( application );

            } );

        };

        // -- ready --------------------------------------------------------------------------------

        this.ready = function( component_uri_or_json_or_object ) {

            // Connect to the conference server. This implementation uses the socket.io library,
            // which communicates using a channel back to the server that provided the client
            // documents.

            try {

                socket = new io.Socket( undefined, {

                    // The socket is relative to the application path.

                    resource: window.location.pathname.slice( 1,
                        window.location.pathname.lastIndexOf("/") ),

                    // The ruby socket.io server only supports WebSockets. Don't try the others.

                    transports: [
                        'websocket',
                        // 'flashsocket',
                        // 'htmlfile',
                        // 'xhr-multipart',
                        // 'xhr-polling',
                        // 'jsonp-polling',
                    ],

                    // Increase the timeout due to starvation while loading the scene. The server
                    // timeout must also be increased.
                    // TODO: reinstate if needed, but this needs to be handled by communicating during the load.

                    // transportOptions: {
                    //     "websocket": { timeout: 90000 },
                        // "flashsocket": { timeout: 90000 },
                        // "htmlfile": { timeout: 90000 },
                        // "xhr-multipart": { timeout: 90000 },
                        // "xhr-polling": { timeout: 90000 },
                        // "jsonp-polling": { timeout: 90000 },
                    // }

    			} );

            } catch ( e ) {

                // If a connection to the conference server is not available, then run in single-
                // user mode. Messages intended for the conference server will loop directly back to
                // us in this case. Start a timer to monitor the incoming queue and dispatch the
                // messages as though they were received from the server.

                this.dispatch( 0 );

                setInterval( function() {
                    vwf.dispatch( vwf.now + 10 ); // TODO: there will be a slight skew here since the callback intervals won't be exactly 10 ms; increment using the actual delta time; also, support play/pause/stop and different playback rates as with connected mode.
                }, 10 );

            }

            if ( socket ) {

                socket.on( "connect", function() { vwf.logger.info( "vwf.socket connected" ) } );

                // Configure a handler to receive messages from the server.
                
                // Note that this example code doesn't implement a robust parser capable of handling
                // arbitrary text and that the messages should be placed in a dedicated priority
                // queue for best performance rather than resorting the queue as each message
                // arrives. Additionally, overlapping messages may cause actions to be performed out
                // of order in some cases if messages are not processed on a single thread.

                socket.on( "message", function( message ) {

                    // this.logger.info( "vwf.socket message " + message );

                    try {

                        // Unpack the arguments.

                        fields = JSON.parse( message );
                        fields.time = Number( fields.time );
                        // TODO: other message validation (check node id, others?)

                        // Add the message to the queue and keep it ordered by time.

                        queue.push( fields );
                        queue.sort( function( a, b ) { return a.time - b.time } );  // TODO: sort must be stable so that messages with the same time are evaluated in the order that they arrive

                        // Each message from the server allows us to move time forward. Parse the
                        // timestamp from the message and call dispatch() to execute all queued
                        // actions through that time, including the message just received.
                    
                        // The simulation may perform immediate actions at the current time or it
                        // may post actions to the queue to be performed in the future. But we only
                        // move time forward for items arriving in the queue from the conference
                        // server.

                        vwf.dispatch( fields.time );

                    } catch( e ) {

                        // Ignore invalid messages.

                    }

                } );

                socket.on( "disconnect", function() { vwf.logger.info( "vwf.socket disconnected" ) } );

                // Start communication with the conference server. 

                socket.connect();

            } else {

                // Load the world. The world is a rooted in a single node constructed here as an
                // instance of the component passed to initialize(). That component, its
                // prototype(s), and its children, and their prototypes and children, flesh out the
                // entire world.

                // TODO: add note that this is only for a self-determined world; with socket, wait for reflection server to tell us.
                // TODO: maybe depends on component_uri_or_json_or_object too; when to override and not connect to reflection server?

                this.createNode( component_uri_or_json_or_object, function( rootID, rootTypeID ) {
                    vwf.addChild( 0, rootID, undefined );
                } );

            }

        };

        // -- send ---------------------------------------------------------------------------------

        // Send a message to the conference server. The message will be reflected back to all
        // participants in the conference.

        this.send = function( /* nodeID, actionName, parameters ... */ ) {

            var args = Array.prototype.slice.call( arguments );

            // Attach the current simulation time and pack the message as an array of the arguments.

            var fields = {
                time: this.now,
                node: args.shift(),
                action: args.shift(),
                parameters: args
            };

            if ( socket ) {

                // Send the message if the connection is available.

                var message = JSON.stringify( fields );
                socket.send( message );

            } else {
                
                // Otherwise, for single-user mode, loop it immediately back to the incoming queue.

                queue.push( fields );
                queue.sort( function( a, b ) { return a.time - b.time } );  // TODO: sort must be stable so that messages with the same time are evaluated in the order that they arrive

            }

        };

        // -- receive ------------------------------------------------------------------------------

        // Handle receipt of a message. Unpack the arguments and call the appropriate handler.

        this.receive = function( fields ) {

            // Advance the time and locate the node ID and action name.

            this.now = fields.time;

            var nodeID = fields.node;
            var actionName = fields.action;

// TODO: delegate parsing and validation to each action.

            // Look up the action handler and invoke it with the remaining parameters.

            // Note that the message should be validated before looking up and invoking an arbitrary
            // handler.

            var args = nodeID || nodeID === 0 ? [ nodeID ].concat( fields.parameters ) : fields.parameters;
            this[actionName] && this[actionName].apply( this, args );
            
        };

        // -- dispatch -----------------------------------------------------------------------------

        // Dispatch incoming messages waiting in the queue. "currentTime" specifies the current
        // simulation time that we should advance to and was taken from the time stamp of the last
        // message received from the conference server.

        this.dispatch = function( currentTime ) {

            // Handle messages until we empty the queue or reach the new current time. For each,
            // remove the message and perform the action. The simulation time is advanced to the
            // message time as each one is processed.

            while ( queue.length > 0 && queue[0].time <= currentTime ) {
                this.receive( queue.shift() );
            }

            // Set the simulation time to the new current time.

            this.now = currentTime;
            
        };

        // -- createNode ---------------------------------------------------------------------------

        // Create a node from a component specification. Construction may require loading data from
        // multiple remote documents. This function returns before construction is complete. A
        // callback is invoked once the node has fully loaded.
        // 
        // A simple node consists of a set of properties, methods and events, but a node may
        // specialize a prototype component and may also contain multiple child nodes, any of which
        // may specialize a prototype component and contain child nodes, etc. So components cover a
        // vast range of complexity. The world definition for the overall simulation is a single
        // component instance.
        // 
        // A node is a component instance--a single, anonymous specialization of its component.
        // Nodes specialize components in the same way that any component may specialize a prototype
        // component. The prototype component is made available as a base, then new or modified
        // properties, methods, events, child nodes and scripts are attached to modify the base
        // implemenation.
        // 
        // To create a node, we first make the prototoype available by loading it (if it has not
        // already been loaded). This is a recursive call to createNode() with the prototype
        // specification. Then we add new, and modify existing, properties, methods, and events
        // according to the component specification. Then we load an add any children, again
        // recursively calling createNode() for each. Finally, we attach any new scripts and invoke
        // an initialization function.

        this.createNode = function( component_uri_or_json_or_object, callback, childName /* TODO: hack */ ) {

            this.logger.group( "vwf.createNode " + (
                typeof component_uri_or_json_or_object == "string" || component_uri_or_json_or_object instanceof String ?
                    component_uri_or_json_or_object : JSON.stringify( loggableComponent( component_uri_or_json_or_object ) )
            ) );

            // Any component specification may be provided as either a URI identifying a network
            // resource containing the specification or as an object literal that provides the data
            // directly.

            var component = normalizedComponent( component_uri_or_json_or_object );

            // Allocate an ID for the node. We just use an incrementing counter.  // TODO: must be unique and consistent regardless of load order; wishfulComponentHash() is a gross hack.

            var nodeID = ( component["extends"] || nodeTypeURI ) + "." + childName; // TODO: was wishfulComponentHash( component );
nodeID = nodeID.replace( /[^0-9A-Za-z_]+/g, "-" ); // stick to HTML id-safe characters

            this.logger.info( "vwf.createNode: creating node of type " + ( component["extends"] || nodeTypeURI ) + " with id " + nodeID );

            // Call getType() to locate or load the prototype node, then pass the prototype and the
            // component specification to construct().

if ( ! callback ) { // TODO: this is a hack to get the multiuser application createNode to addChild to the root
    callback = function( nodeID, prototypeID ) {
        vwf.addChild( 0, nodeID, undefined ) 
    };
}

			this.getType( component["extends"] || nodeTypeURI, function( prototypeID ) { // TODO: could be a JSON-encoded type literal as with world param?
				construct.call( this, component, nodeID, prototypeID, callback /* ( nodeID, prototypeID ) */ );
			} );


            this.logger.groupEnd(); this.logger.debug( "vwf.createNode complete " + component_uri_or_json_or_object ); /* must log something for group level to reset in WebKit */
        };


        // -- getType ------------------------------------------------------------------------------

        // Find or load a node that will serve as the prototype for a component specification. If
        // the component is identified using a URI, save a mapping from the URI to the prototype ID
        // in the "types" database for reuse. If the component is not identified by a URI, don't
        // save a reference in the database (since no other component can refer to it), and just
        // create it as an anonymous type.

        this.getType = function( uri, callback ) {

            var nodeID = uri; // TODO: hash uri => nodeID to shorten for faster lookups? // TODO: canonicalize uri
nodeID = nodeID.replace( /[^0-9A-Za-z_]+/g, "-" ); // stick to HTML id-safe characters

            // If the URI is in the database, invoke the callback with the ID of the previously-
            // loaded prototype node.
            
            if ( types[uri] ) {

                callback && callback.call( this, nodeID );

            // If the type has not been loaded, call createNode() to make the node that we will use
            // as the prototype. When it loads, save the ID in the types database and invoke the
            // callback with the new prototype node's ID.

            // nodeTypeURI is a special URI identifying the base "node" component that is the
            // ultimate prototype of all other components. Its specification is known
            // intrinsicly and does not exist as a network resource. If the component URI
            // identifies "node", call construct() directly and pass a null prototype and an
            // empty specification.

            } else if ( uri == nodeTypeURI ) {

                var component = {};
                var prototypeID = undefined;

                this.logger.info( "vwf.getType: creating type " + uri );

                construct.call( this, component, nodeID, prototypeID, function( nodeID, prototypeID ) {
                    types[uri] = component;
                    callback && callback.call( this, nodeID );
                } );

            // For any other URI, load the document. Once it loads, call getType() to locate or
            // load the prototype node, then pass the prototype and the component specification
            // to construct().

            } else {

                this.logger.info( "vwf.getType: creating type " + uri );

                jQuery.ajax( {
                    url: remappedURI( uri ),
                    dataType: "jsonp",
                    success: function( component ) {
                        this.getType( component["extends"] || nodeTypeURI, function( prototypeID ) { // TODO: if object literal?
                            if ( ! types[uri] ) {
                                construct.call( this, component, nodeID, prototypeID, function( nodeID, prototypeID ) {
                                    types[uri] = component;
                                    callback && callback.call( this, nodeID );
                                } );
                            } else { // TODO: handle multiple loads of same type better
                                callback && callback.call( this, nodeID );
                            }
                        } )
                    },
                    context: this
                } );

            }

        };

        // -- addChild -----------------------------------------------------------------------------

        this.addChild = function( nodeID, childID, childName ) {

            this.logger.group( "vwf.addChild " + nodeID + " " + childID + " " + childName );

            // Call addingChild() on each model. The child is considered added after each model has
            // run.

            jQuery.each( vwf.models, function( index, model ) {
                model.addingChild && model.addingChild( nodeID, childID, childName );
            } );

            // Call addedChild() on each view. The view is being notified that a child has been
            // added.

            jQuery.each( vwf.views, function( index, view ) {
                view.addedChild && view.addedChild( nodeID, childID, childName );
            } );

            this.logger.groupEnd(); this.logger.debug( "vwf.addChild complete " + nodeID + " " + childID + " " + childName ); /* must log something for group level to reset in WebKit */
        };

        // -- removeChild --------------------------------------------------------------------------

        this.removeChild = function( nodeID, childID ) {

            this.logger.group( "vwf.removeChild " + nodeID + " " + childID );

            // Call removingChild() on each model. The child is considered removed after each model
            // has run.

            jQuery.each( vwf.models, function( index, model ) {
                model.removingChild && model.removingChild( nodeID, childID );
            } );

            // Call removedChild() on each view. The view is being notified that a child has been
            // removed.

            jQuery.each( vwf.views, function( index, view ) {
                view.removedChild && view.removedChild( nodeID, childID );
            } );

            this.logger.groupEnd(); this.logger.debug( "vwf.removeChild complete " + nodeID + " " + childID ); /* must log something for group level to reset in WebKit */
        };

        // -- parent -------------------------------------------------------------------------------

        this.parent = function( nodeID ) {

            // Call parenting() on each model. The first model to return a non-undefined value
            // dictates the return value.

            var parent = undefined;

            jQuery.each( vwf.models, function( index, model ) {
                var modelParent = model.parenting && model.parenting( nodeID );
                parent = modelParent !== undefined ? modelParent  : parent;
            } );

            return parent;
        };

        // -- children -----------------------------------------------------------------------------

        this.children = function( nodeID ) {

            this.logger.group( "vwf.children " + nodeID );

            // Call childrening() on each model. The return value is the union of the non-undefined
            // results.

            var children = [];

            jQuery.each( vwf.models, function( index, model ) {
                var modelChildren = model.childrening && model.childrening( nodeID ) || [];
                Array.prototype.push.apply( children, modelChildren );
            } );

            this.logger.groupEnd(); this.logger.debug( "vwf.children complete " + nodeID ); /* must log something for group level to reset in WebKit */

            return children; // TODO: remove duplicates, hopefully without re-ordering.
        };

        // -- name ---------------------------------------------------------------------------------

        this.name = function( nodeID ) {

            // Call naming() on each model. The first model to return a non-undefined value dictates
            // the return value.

            var name = undefined;

            jQuery.each( vwf.models, function( index, model ) {
                var modelName = model.naming && model.naming( nodeID );
                name = modelName !== undefined ? modelName : name;
            } );

            return name;
        };

        // -- createProperty -----------------------------------------------------------------------

        // Create a property on a node and assign an initial value.

        this.createProperty = function( nodeID, propertyName, propertyValue ) {

            this.logger.group( "vwf.createProperty " + nodeID + " " + propertyName + " " + propertyValue );

            // Call creatingProperty() on each model. The property is considered created after each
            // model has run.

            jQuery.each( vwf.models, function( index, model ) {
                model.creatingProperty && model.creatingProperty( nodeID, propertyName, propertyValue );
            } );

            // Call createdProperty() on each view. The view is being notified that a property has
            // been created.

            jQuery.each( vwf.views, function( index, view ) {
                view.createdProperty && view.createdProperty( nodeID, propertyName, propertyValue );
            } );

            this.logger.groupEnd(); this.logger.debug( "vwf.createProperty complete " + nodeID + " " + propertyName + " " + propertyValue ); /* must log something for group level to reset in WebKit */
        };

        // -- setProperty --------------------------------------------------------------------------

        // Set a property value on a node.

        this.setProperty = function( nodeID, propertyName, propertyValue ) {

            this.logger.group( "vwf.setProperty " + nodeID + " " + propertyName + " " + propertyValue );

            // Call settingProperty() on each model. The property is considered set after each model
            // has run.

            jQuery.each( vwf.models, function( index, model ) {
                var value = model.settingProperty && model.settingProperty( nodeID, propertyName, propertyValue );
                propertyValue = value !== undefined ? value : propertyValue;
            } );

            // Call satProperty() on each view. The view is being notified that a property has been
            // set.

            jQuery.each( vwf.views, function( index, view ) {
                view.satProperty && view.satProperty( nodeID, propertyName, propertyValue );
            } );

            this.logger.groupEnd(); this.logger.debug( "vwf.setProperty complete " + nodeID + " " + propertyName + " " + propertyValue ); /* must log something for group level to reset in WebKit */

            return propertyValue;
        };

        // -- getProperty --------------------------------------------------------------------------

        // Get a property value for a node.

        this.getProperty = function( nodeID, propertyName ) {

            this.logger.group( "vwf.getProperty " + nodeID + " " + propertyName );

            // Call gettingProperty() on each model. The first model to return a non-undefined value
            // dictates the return value.

            var propertyValue = undefined;

            jQuery.each( vwf.models, function( index, model ) {
                var value = model.gettingProperty && model.gettingProperty( nodeID, propertyName );
                propertyValue = value !== undefined ? value : propertyValue;
            } );

            // Call gotProperty() on each view.

            jQuery.each( vwf.views, function( index, view ) {
                view.gotProperty && view.gotProperty( nodeID, propertyName, propertyValue );
            } );

            this.logger.groupEnd(); this.logger.debug( "vwf.getProperty complete " + nodeID + " " + propertyName ); /* must log something for group level to reset in WebKit */

            return propertyValue;
        };

        // -- createMethod -------------------------------------------------------------------------

        this.createMethod = function ( nodeID, methodName ) {

            this.logger.group( "vwf.createMethod " + nodeID + " " + methodName );

            // Call creatingMethod() on each model. The method is considered created after each
            // model has run.

            jQuery.each( vwf.models, function ( index, model ) {
                model.creatingMethod && model.creatingMethod( nodeID, methodName );
            } );

            // Call createdMethod() on each view. The view is being notified that a method has been
            // created.

            jQuery.each( vwf.views, function ( index, view ) {
                view.createdMethod && view.createdMethod( nodeID, methodName );
            });

            this.logger.groupEnd(); this.logger.debug( "vwf.createMethod complete " + nodeID + " " + methodName ); /* must log something for group level to reset in WebKit */
        };

        // -- callMethod ---------------------------------------------------------------------------

        this.callMethod = function( nodeID, methodName ) { // TODO: parameters

            this.logger.group( "vwf.callMethod " + nodeID + " " + methodName ); // TODO: parameters

            // Call callingMethod() on each model. The first model to return a non-undefined value
            // dictates the return value.

            var methodValue = undefined;

            jQuery.each( vwf.models, function( index, model ) {
                var value = model.callingMethod && model.callingMethod( nodeID, methodName ); // TODO: parameters
                methodValue = value !== undefined ? value : methodValue;
            } );

            // Call calledMethod() on each view.

            jQuery.each( vwf.views, function( index, view ) {
                view.calledMethod && view.calledMethod( nodeID, methodName ); // TODO: parameters
            } );

            this.logger.groupEnd(); this.logger.debug( "vwf.callMethod complete " + nodeID + " " + methodName ); /* must log something for group level to reset in WebKit */

            return methodValue;
        };

        // -- execute ------------------------------------------------------------------------------

        this.execute = function( nodeID, scriptText, scriptType ) {

            this.logger.group( "vwf.execute " + nodeID + " " + ( scriptText || "" ).replace( /\s+/g, " " ).substring( 0, 100 ) + " " + scriptType );
 
            // Call executing() on each model. The script is considered executed after each model
            // has run.

            var scriptValue = undefined;

            jQuery.each( vwf.models, function( index, model ) {
                var value = model.executing && model.executing( nodeID, scriptText, scriptType ); // TODO: return value
                scriptValue = value !== undefined ? value : scriptValue;
            } );

            // Call executed() on each view. The view is being notified that a script has been
            // executed.

            jQuery.each( vwf.views, function( index, view ) {
                view.executed && view.executed( nodeID, scriptText, scriptType );
            } );

            this.logger.groupEnd(); this.logger.debug( "vwf.execute complete " + nodeID + " ... " + scriptType ); /* must log something for group level to reset in WebKit */

            return scriptValue;
        };

        // -- time ---------------------------------------------------------------------------------

        // Return the current simulation time;

        this.time = function() {

            // this.logger.debug( "vwf.time" );

            return this.now;
        }

        // -- logging ------------------------------------------------------------------------------

//        this.logger = {
//
//            log: function() { /*window.console && console.log && console.log.apply( console, arguments )*/ },
//            debug: function() { /*window.console && console.debug && console.debug.apply( console, arguments )*/ },
//            info: function() { /*window.console && console.info && console.info.apply( console, arguments )*/ },
//            warn: function() { window.console && console.warn && console.warn.apply( console, arguments ) },
//            error: function() { window.console && console.error && console.error.apply( console, arguments ) },
//            group: function() { /*window.console && console.group && console.group.apply( console, arguments )*/ },
//            groupCollapsed: function() { /* window.console && console.groupCollapsed && console.groupCollapsed.apply( console, arguments ) */ },
//            groupEnd: function() { /* window.console && console.groupEnd && console.groupEnd.apply( console, arguments ) */ },
//
//        };

        this.logger = {

            log: function() { window.console && console.log && console.log.apply( console, arguments ) },
            debug: function() { window.console && console.debug && console.debug.apply( console, arguments ) },
            info: function() { window.console && console.info && console.info.apply( console, arguments ) },
            warn: function() { window.console && console.warn && console.warn.apply( console, arguments ) },
            error: function() { window.console && console.error && console.error.apply( console, arguments ) },
            group: function() { window.console && console.group && console.group.apply( console, arguments ) },
            groupCollapsed: function() {  window.console && console.groupCollapsed && console.groupCollapsed.apply( console, arguments )  },
            groupEnd: function() {  window.console && console.groupEnd && console.groupEnd.apply( console, arguments )  },

        };

        // == Private functions ====================================================================

        // -- construct ----------------------------------------------------------------------------

        // When we arrive here, we have a prototype node in hand (by way of its ID) and an object
        // containing a component specification. We now need to create and assemble the new node.
        // 
        // The VWF manager doesn't directly manipulate any node. The various models act in
        // federation to create the greater model. The manager simply routes messages within the
        // system to allow the models to maintain the necessary data. Additionally, the views
        // receive similar messages that allow them to keep their interfaces current.
        //
        // To create a node, we simply assign a new ID, then invoke a notification on each model and
        // a notification on each view.

        var construct = function( component, nodeID, prototypeID, callback_nodeID_prototypeID ) {

            this.logger.group( "vwf.construct " + nodeID + " " + component.source + " " + component.type );

            async.series( [

                function( callback_err_results ) {

                    // Call creatingNode() on each model. The node is considered to be constructed after
                    // each model has run.

                    jQuery.each( vwf.models, function( index, model ) {
                        model.creatingNode && model.creatingNode( nodeID, prototypeID, [], component.source, component.type );
                    } );

                    // Call createdNode() on each view. The view is being notified of a node that has
                    // been constructed.

                    jQuery.each( vwf.views, function( index, view ) {
                        view.createdNode && view.createdNode( nodeID, prototypeID, [], component.source, component.type );
                    } );

                    callback_err_results( undefined, undefined );
                },

                function( callback_err_results ) {

                    // Create the properties, methods, and events. For each item in each set, invoke
                    // createProperty(), createMethod(), or createEvent() to create the field. Each
                    // delegates to the models and views as above.

                    component.properties && jQuery.each( component.properties, function( propertyName, propertyValue ) {
                        vwf.createProperty( nodeID, propertyName, propertyValue );
                    } );

                    component.methods && jQuery.each( component.methods, function( methodName ) {
                        vwf.createMethod( nodeID, methodName );
                    } );

                    component.events && jQuery.each( component.events, function( eventName ) {
                        vwf.createEvent( nodeID, eventName );
                    } );

                    callback_err_results( undefined, undefined );
                },

                function( callback_err_results ) {

                    // Create and attach the children. For each child, call createNode() with the
                    // child's component specification, then once loaded, call addChild() to attach the
                    // new node as a child. addChild() delegates to the models and views as before.

                    async.parallel(

                        Object.keys( component.children || {} ).map( function( childName ) {
                            return function( callback_err_results2 ) {
                                vwf.createNode( component.children[childName], function( childID, childTypeID ) {
                                    vwf.addChild( nodeID, childID, childName ); // TODO: add in original order from component.children
                                    callback_err_results2( undefined, undefined );
                                },
childName /* TODO: hack */ );
                            };
                        } ),

                        function( err, results ) {
                            callback_err_results( err, results );
                        }

                    );

                },

				
                function( callback_err_results ) {

                    // Attach the scripts. For each script, load the network resource if the script is
                    // specified as a URI, then once loaded, call execute() to direct any model that
                    // manages scripts of this script's type to evaluate the script where it will
                    // perform any immediate actions and retain any callbacks as appropriate for the
                    // script type.

                    component.scripts && jQuery.each( component.scripts, function( scriptNumber, script ) {
//						var nameRemovedID = nodeID.substring( 0, nodeID.lastIndexOf( '-' ) );
//						
//						if ( nameRemovedID == "http-vwf-example-com-types" ) {
//							
//							//console.info( "ADDING SCRIPT TO TYPE " + nodeID + " " + ( script.text || "" ).replace( /\s+/g, " " ).substring( 0, 100 ) + " " + script.type );

//							if ( script.text && vwf.classScripts ) {
//								if ( !vwf.classScripts[nodeID] ) {
//									vwf.classScripts[nodeID] = [ { 'text': script.text, 'type': script.type } ];
//								} else { 
//									vwf.classScripts[nodeID].add( { 'text': script.text, 'type': script.type } );
//								}
//							}
//						}

						script.text && vwf.execute( nodeID, script.text, script.type ); // TODO: external scripts too // TODO: callback
                    } );

                    callback_err_results( undefined, undefined );
                },

                function( callback_err_results ) {
//					var classID = nodeID.substring( 0, nodeID.lastIndexOf( '-' ) );

                    // Invoke an initialization method.
                    vwf.execute( nodeID, "this.hasOwnProperty( 'initialize' ) && this.initialize()", "application/javascript" ); 
					
//					if ( vwf.classScripts && vwf.classScripts[classID] ) {
//						var scripts = vwf.classScripts[classID];
//						for ( var i = 0; i < scripts.length; i++ ) {
//							//console.info( "ADDING SCRIPT TO OBJECT " + nodeID + " " + ( scripts[i]['text'] || "" ).replace( /\s+/g, " " ).substring( 0, 100 ) );
//							vwf.execute( nodeID, scripts[i]['text'] , scripts[i]['type'] ); 						
//						}
//					}
                    callback_err_results( undefined, undefined );
                },

            ], function( err, results ) {

                // The node is complete. Invoke the callback method and pass the new node ID and the
                // ID of its prototype. If this was the root node for the world, the world is now
                // fully initialized.

                callback_nodeID_prototypeID &&
                    callback_nodeID_prototypeID.call( vwf, nodeID, prototypeID ); // TODO: not until children and scripts have loaded
            } );

            this.logger.groupEnd(); this.logger.debug( "vwf.construct complete " + nodeID + " " + component.source + " " + component.type ); /* must log something for group level to reset in WebKit */
        }

        // -- objectIsComponent --------------------------------------------------------------------

        // Determine if a JavaScript object is a component specification by searching for component
        // specification attributes in the candidate object.

        var objectIsComponent = function( candidate ) {

            var componentAttributes = [
                "extends",
                "implements",
                "source",
                "type",
                "properties",
                "methods",
                "events",
                "children",
                "scripts",
            ];

            var isComponent = false;

            if ( ( typeof candidate == "object" || candidate instanceof Object ) && candidate != null ) {

                jQuery.each( componentAttributes, function( index, attributeName ) {
                    isComponent = isComponent || Boolean( candidate[attributeName] );
                } );

            }
            
            return isComponent; 
        };

        // -- wishfulComponentHash -----------------------------------------------------------------

        // Generate a hash of sort from a component specification. This is part of a wild hack to
        // assign consistent, unique IDs to nodes, regardless of the load order. This does not
        // produce a reliable, or even a short, hash and only partially addresses the main problem.

        var wishfulComponentHash = function( component ) {

            var hash = "";

            if ( component.extends ) hash += component.extends + ".";
            if ( component.source ) hash += component.source + ".";
            // if ( component.type ) hash += component.type + "."; // just adds verbosity

            component.properties && jQuery.each( component.properties, function( propertyName, propertyValue ) {
                hash += propertyName + ".";
            } );

            component.methods && jQuery.each( component.methods, function( methodName ) {
                hash += methodName + ".";
            } );

            component.events && jQuery.each( component.events, function( eventName ) {
                hash += eventName + ".";
            } );

            component.children && jQuery.each( component.children, function( childName, child_uri_or_json_or_object ) {
                hash += childName + ".";
            } );

            component.scripts && jQuery.each( component.scripts, function( scriptNumber, script ) {
                if ( script.text ) hash += script.text.length + ".";
                if ( script.source ) hash += script.source + ".";
                // if ( script.type ) hash += script.type + "."; // redundant and verbose for now
            } );

            return hash.slice( 0, -1 );

        };

        // -- normalizedComponent ------------------------------------------------------------------

        var normalizedComponent = function( /* component */ ) {

            var component = arguments[0]; // component is sometimes not writable when it is an argument?

            // Decode if JSON.

            if ( typeof component == "string" || component instanceof String ) {
                try { component = JSON.parse( component ) } catch( e ) { }
            }

            // Convert a component URI to an instance of that type. Convert an asset reference to
            // an untyped reference to that asset.

            if ( typeof component == "string" || component instanceof String ) { // TODO: validate URI
                component = component.match( /\.vwf$/ ) ? { "extends": component } : { source: component }; // TODO: detect component from mime-type instead of extension?
            }

            // Fill in the mime type from the source specification if not provided.

            if ( component.source && ! component.type ) { // TODO: validate component

                var match = component.source.match( /\.([^.]*)$/ ); // TODO: get type from mime-type (from server if remote, from os if local, or (?) from this internal table otherwise)

                if ( match ) {

                    switch ( match[1] ) {
                        case "unity3d":
                            component.type = "application/vnd.unity";
                            break;
                        case "dae":
                            component.type = "model/vnd.collada+xml";
                            break;
                    }

                }

            }

            // Fill in the component type from the mime type if not provided.

            if ( component.type && ! component.extends ) { // TODO: load from a server configuration file

                switch ( component.type ) {
                    case "application/vnd.unity":
                        component.extends = "http://vwf.example.com/types/scene";
                        break;
                    case "model/vnd.collada+xml":
                        component.extends = "http://vwf.example.com/types/glge";
                        break;
                }

            }

            return component;
        };

        // -- loggableComponent --------------------------------------------------------------------

        // Return a copy of a component with the verbose bits truncated so that it may be written to
        // a log.

        var loggableComponent = function( component ) {

            var loggable = {};

            for ( var name in component ) {

                switch ( name ) {

                    case "children":

                        loggable.children = {};

                        for ( var name in component.children ) {
                            loggable.children[name] = {};
                        }

                        break;

                    case "scripts":

                        loggable.scripts = [];

                        component.scripts.forEach( function( script ) {

                            var loggableScript = {};

                            for ( var name in script ) {
                                loggableScript[name] = name == "text" ? "" : script[name];
                            }

                            loggable.scripts.push( loggableScript );

                        } );

                        break;

                    default:

                        loggable[name] = component[name];

                        break;
                }

            }

            return loggable;
        };

        // -- remappedURI --------------------------------------------------------------------------

        // Remap a type identifier to its location in a local cache.

        // http://vwf.example.com/types/sometype => http://localhost:8001/types/sometype.js

        var remappedURI = function( uri ) {

            var match = uri.match( RegExp( "http://vwf.example.com/types/(.*)" ) );

            if ( match ) {
                uri = window.location.protocol + "//" + window.location.host + "/types/" + match[1] + ".vwf";
            }

            return uri;

        };

        // -- getQueryString -----------------------------------------------------------------------

        // Retrieve parameters from the page's query string.

        // From http://stackoverflow.com/questions/901115/get-querystring-values-with-jquery/2880929#2880929
        // and http://stackoverflow.com/questions/901115/get-querystring-values-with-jquery/3867610#3867610.

        var getQueryString = function( name ) {

            function parseParams() {
                var params = {},
                    e,
                    a = /\+/g, // regex for replacing addition symbol with a space
                    r = /([^&;=]+)=?([^&;]*)/g,
                    d = function( s ) { return decodeURIComponent( s.replace(a, " ") ); },
                    q = window.location.search.substring(1);

                while ( e = r.exec(q) )
                    params[ d(e[1]) ] = d(e[2]);

                return params;
            }

            if ( ! queryStringParams )
                queryStringParams = parseParams();

            return queryStringParams[name];
        };

    };

} ) ( window );
