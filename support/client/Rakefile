require "rake"
require "rake/clean"
require "tilt"


SOURCE = "lib"
DESTINATION = "libz"

DDESTINATION = "libd"

PATTERNS = [ "vwf.js", "vwf/*.js", "vwf/*/*.js", "vwf/*/stage/*.js" ]

chdir SOURCE do
    MODULES = FileList.new( PATTERNS ).sort.map do |file|
        file.sub %r{\.js$}, ""
    end
end

CLEAN.include "build.js", "#{DESTINATION}/**/*.js.z", "#{DESTINATION}/build.txt"
CLOBBER.include "#{DESTINATION}"


desc "Run the RequireJS optimizer."

task :build => [ :clean, :compile, :compress ]

desc "Generate the compilation script."

file "build.js" => "build.js.erb" do |task|

    File.open( task.name, "w" ) do |io|
        io.write Tilt.new( task.prerequisites.first ).
            render Object.new, :source => SOURCE, :destination => DESTINATION, :modules => MODULES
    end

end

desc "Compile."

task :compile => "build.js" do |task|

    separator = RbConfig::CONFIG["host_os"] =~ /mswin|mingw|cygwin/ ? "\\;" : ":"

    sh <<-SH.strip.gsub %r{ +}, " "
        java -classpath bin/js.jar#{separator}bin/compiler.jar \
            org.mozilla.javascript.tools.shell.Main bin/r.js -o build.js
    SH

end

desc "Compress."

task :compress => "build.js" do |task|
    
    MODULES.each do |path|
        
        sh <<-SH.strip.gsub %r{ +}, " "
            java -jar bin/compiler.jar --compilation_level ADVANCED_OPTIMIZATIONS --language_in ECMASCRIPT5 \
                --js '#{DESTINATION}/#{path}.js' --js_output_file '#{DESTINATION}/#{path}.js.z'
        SH

        mv "#{DESTINATION}/#{path}.js.z", "#{DESTINATION}/#{path}.js"

    end

end

desc "Doc"

task :doc do |task|

    # Convert /// comments to /** */ comments for jsdoc.

    rm_r DDESTINATION, :force => true
    cp_r SOURCE, DDESTINATION

    chdir DDESTINATION do

        FileList.new( PATTERNS ).sort.each do |path|
            sh <<-SH.strip.gsub %r{ +}, " "
                ruby -p -i.bak -e ' \
                    case ( state ||= 0 ) + ( %r{^\s*///} ? 1 : 0 ) \
                        when 1 ; \
                            last = $_ ; sub %r{///}, "/**" ; \
                            state = 2 \
                        when 2 ; \
                            puts last.sub %r{///.*}, " */" ; \
                            state = 0 \
                        when 3 ; \
                            last = $_ ; sub %r{///}, " * " \
                    end \
                ' '#{path}'
            SH
        end

        sh <<-SH.strip.gsub %r{ +}, " "

            java -jar ../../build/jsdoc_toolkit-2.4.0/jsrun.jar ../../build/jsdoc_toolkit-2.4.0/app/run.js \
                -Djsdoc.dir=../../build/jsdoc_toolkit-2.4.0 \
                --template=../../build/jsdoc_toolkit-2.4.0/templates/jsdoc --allfunctions --recurse=10 --directory=../doc/jsdoc \
                #{ FileList.new( PATTERNS ).sort.map { |path| "'" + path + "'" } .join " " }

        SH

    end

end

#             -E=closure -E=async.js -E='jquery.*' -E=domReady.js -E=require.js -E=socket.io.js -E='glge-.*' -E='[/\\](glge|jiglib)[/\\].*' -E=UnityObject.js
