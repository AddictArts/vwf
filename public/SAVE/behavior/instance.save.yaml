# Copyright 2014, SRI International
---
methods:
  instanceAutoLoads:
  transformGroupingToNode3:
  parseInstanceResponseGrouping:
  vwfChildJsonFromGrouping:
  createObjectParentsForMetaGroups:
  initInstance:
  instance:
scripts:
- |
  this.instanceAutoLoads = function() {
    var self = this;

    if (self.ShootingRange_dae === undefined) return; // this instancing is not dynamic, post 1.0

    self.obj({ type: 'create', ID: null, auto: true }, function(rdata) {
      var data = rdata[ 0 ];

      console.info(self.id + ' obj request received data.kbid: ' + data.KbId + ' assetURL: ' + data.assetURL);
      self.query({ type: 'KbId', parent: data.KbId, query: [ 'targets' ] },
        function(data) {
          console.info(self.id + " KbId query received data " + JSON.stringify(data).slice(0, 272) + '...');
          self.ShootingRange_dae.properties.create('targets_KbId', data.KbIds[ 0 ]);
      });
    });
  };

  this.transformGroupingToNode3 = function(obj, node3, mgroups) {
    var self = this;

    for (var p in obj) {
      if (p == 'groups') {
        obj.groups.forEach(function(group) {
          var children = node3;

          if (group.node) {
              node3.children[ group.node ] = { extends: "http://vwf.example.com/node3.vwf", children: { } };
              children = node3.children[ group.node ];
          } else {
            mgroups.push(group.name);
          }

          self.transformGroupingToNode3(group, children, mgroups);
        });
      } else if (p == 'parts') {
        obj.parts.forEach(function(part) {
            node3.children[ part ] = { extends: "http://vwf.example.com/node3.vwf" };
        });
      }
    }

    return { vwf_node3: node3, mgroups: mgroups };
  };

  this.parseInstanceResponseGrouping = function(data) {
    var grouping;

    if (data.grouping !== undefined) {
      if (Object.prototype.toString.call(data.grouping) == '[object Object]') grouping = data.grouping;
      else grouping = JSON.parse(data.grouping);
    } else {
      console.warn(this.id + ' object instance request returned undefined grouping');
      grouping = { name: undefined };
    }

    return grouping;
  };

  this.vwfChildJsonFromGrouping = function(data) {
    var self = this;
    var grouping, name, tform;
    var impl = [ '.behave/initNode3.save', '.behave/backendtxrx.save' ]; // => base behavior, and properties

    grouping = self.parseInstanceResponseGrouping(data);
    name = grouping.name.replace(' ', '_') + '_dae'; // => ex: ShootingRange -> ShootingRange_dae

    if (!self.__CAT) impl.push(name + '.eui'); // implement asset behaviors where any auto-loaded assets do not by convention have a asset_name_dae.eui.yaml

    // vwf include might be better? var tt = { "includes": "tool.vwf" } ... this.children.create("tool", tt, function( child ) { ... });
    tform = self.transformGroupingToNode3(grouping, {
      extends: "http://vwf.example.com/node3.vwf",
      source: data.assetURL,
      type: "model/vnd.collada+xml",
      implements: impl, // => base behavior, and properties
      properties: { },
      children: { },
      grouping: grouping.name
    }, [ ]);

    self.children.create(name, tform.vwf_node3, function(child) {
      self.initInstance(name, data.KbId, tform.mgroups);
      self.createObjectParentsForMetaGroups(grouping, self.children[ name ]);
    });
  };

  this.createObjectParentsForMetaGroups = function(obj, parent) {
    var self = this;

    for (var p in obj) {
      if (p == 'groups') {
        obj.groups.forEach(function(group) {
          if (group.name && group.node === undefined) {
            parent.children.create(group.name, { extends: "http://vwf.example.com/node3.vwf" }, function(child) {
              if (group.parts) group.parts.forEach(function(part) {
                console.info('Object parent:' + group.name + ' parenting part:' + part + ' to it');

                var partNode = self.find('//' + part)[ 0 ];

                partNode.parent_ = child;
              });

              if (group.groups) {
                console.info('Group:' + group.name + ' has ' + group.groups.length  + ' groups');
                self.createObjectParentsForMetaGroups(group, child);
              }
            });
          }
        });
      }
    }
  };

  this.initInstance = function(name, kbid, mgroups) {
    this.children[ name ].init(kbid, mgroups);

    if (!this.__CAT) this.children[ name ].setup();

    return name;
  };

  this.instance = function(trayName, backEndId) {
    console.info(this.id + ' instancing tool tray item with trayName:' + trayName  + ' id:' + backEndId);

    var self = this;

    self.obj({ type: 'create', ID: backEndId, auto: false }, function(rdata) {
      var data = rdata[ 0 ];

      console.info(self.id + ' obj request received data.KbId: ' + data.KbId + ' assetURL: ' + data.assetURL);
      self.vwfChildJsonFromGrouping(data);
    });
  }; //# sourceURL=instance.save
