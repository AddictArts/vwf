---
properties:
  activityServerAddress:
  activityArguments:
  action:
methods:
  checkActivityServerAddress:
  getActionActivity:
  paintActivity:
events:
  pointerUp:
scripts:
- |
  this.initialize = function() {
    this.activityArguments = {
      floorKBID : "activity.ux floorKBID",
      wallKBID : "activity.ux wallKBID",
      doorWoodKBID : "activity.ux doorWoodKBID",
      doorSteelKBID : "activity.ux doorSteelKBID",
      distanceLeft : -1.0,
      distanceRight : -1.0,
      onEdge : false,
      paint : "activity.ux paint"
    };
    this.action = this.action || "activity.ux action";
  };

  this.checkActivityServerAddress = function() {
    if (!this.activityServerAddress) {
      var msg = "The activity server address is undefined, check the eui.json setting";
      $('#debugMsg').text(msg);
      this.logger.warnx(msg)
    } else {
      console.log("activity.ux activityServerAddress:" + this.activityServerAddress);
    }
  }

  this.getActionActivity = function(action) {
    var action,
        activityArguments = "undefined arguments";

    switch(action) {
    case "PLACE":
      this.activityArguments.onEdge = this._onEdge;
      activityArguments = [ this.activityArguments.wallKBID, this.activityArguments.floorKBID, this.activityArguments.onEdge];
      break;
    case "INSTALL":
      var Vec3 = goog.vec.Vec3;
      var doorKBID = (this.name == "doorWood")? this.activityArguments.doorWoodKBID : this.activityArguments.doorSteelKBID;
      var edgeDoorOneVec = Vec3.createFloat32FromArray(this.translation);
      var edgeDoorTwoVec = Vec3.createFloat32FromArray(this.translation);
      var edgeFloorOneVec = Vec3.createFloat32FromArray(this.parent.parent.children['slab_dae'].translation);
      var edgeFloorTwoVec = Vec3.createFloat32FromArray(this.parent.parent.children['slab_dae'].translation);

      // I'm cheating a little by not making a vector from the translation (center of geometry "COG" mostlikely) to an edge
      // From inspection of the models the distances I am interested in are along the x axis
      Vec3.subtract(edgeDoorOneVec, Vec3.createFloat32FromArray([ 1.5, edgeDoorOneVec[1], edgeDoorOneVec[2] ]), edgeDoorOneVec);
      Vec3.add(edgeDoorTwoVec, Vec3.createFloat32FromArray([ 1.5, -edgeDoorTwoVec[1], -edgeDoorTwoVec[2] ]), edgeDoorTwoVec);
      // I'm going to cheat here and use 0 for the y and z components since I know the slab_dae is at 0, 0, 0 initially
      Vec3.subtract(edgeFloorOneVec, Vec3.createFloat32FromArray([ 10, 0, 0 ]), edgeFloorOneVec);
      Vec3.add(edgeFloorTwoVec, Vec3.createFloat32FromArray([ 10, 0, 0 ]), edgeFloorTwoVec);
      this.activityArguments.distanceLeft = Math.round(Vec3.distance(edgeDoorOneVec, edgeFloorOneVec) * 100) / 100;
      this.activityArguments.distanceRight = Math.round(Vec3.distance(edgeDoorTwoVec, edgeFloorTwoVec) * 100) / 100;

      activityArguments = [ doorKBID, this.activityArguments.wallKBID, this.activityArguments.distanceLeft, this.activityArguments.distanceRight ];
      break;
    case "PAINT":
      var doorKBID = (this.name == "doorWood")? this.activityArguments.doorWoodKBID : this.activityArguments.doorSteelKBID;

      activityArguments = [ doorKBID, this.activityArguments.paint ];
      break;
    }

    action = {  action: action, arguments: activityArguments };
    return action;
  };

  this.pointerUp = function(pointerInfo, pickInfo) {
    console.log("activity.ux pointerUp");

    var activityJSON = JSON.stringify(this.getActionActivity(this.action));

    $('#debugMsg').text(activityJSON);
    this.checkActivityServerAddress();
  	$.ajax({
      url: this.activityServerAddress,
      // processData: false,
      type: 'post',
      cache: false,
      // dataType: 'json',
      // contentType: 'application/json; charset=utf-8',
      data: { activity: activityJSON }
    })
    .done(function(data) {
    })
    .fail(function(jqXHR, textStatus, errorThrown) {
      console.log("error:" + textStatus);
    });
  };

  // http://www.html5rocks.com/en/tutorials/cors/
  // response['Access-Control-Allow-Origin'] = '*'
  // response['Access-Control-Allow-Methods'] = 'POST, GET, OPTIONS'
  // response['Access-Control-Max-Age'] = 1000
  // # note that '*' is not valid for Access-Control-Allow-Headers
  // response['Access-Control-Allow-Headers'] = 'origin, x-csrftoken, content-type, accept'

  this.paintActivity = function(color) {
    console.log("activity.ux paintActivity");

    var activityJSON = JSON.stringify(this.getActionActivity('PAINT'));

    $('#debugMsg').text(activityJSON);
    this.checkActivityServerAddress();
    $.ajax({
      url: this.activityServerAddress,
      type: 'post',
      cache: false,
      data: { activity: activityJSON }
    })
    .done(function(data) {
    })
    .fail(function(jqXHR, textStatus, errorThrown) {
      console.log("error:" + textStatus);
    });
  }; //@ sourceURL=activity.ux
