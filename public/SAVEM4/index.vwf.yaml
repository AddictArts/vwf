--- 
extends: http://vwf.example.com/scene.vwf
implements:
# - begin.eui
- activity.ux
methods:
  initializeCamera:
  zoom:
  orbit:
  lookAt:
  clearLookAt:
  instance:
properties:
  zoomedValue:
  scaling:
  camTarget:
children:
  M4_Environment_01_dae:
    extends: http://vwf.example.com/node3.vwf
    source: models/M4_Environment_01.dae
    type: model/vnd.collada+xml
    properties:
      scale: [ 1.0, 1.0, 1.0 ]
      translation: [ 0.0, 0.0, 0.0 ]
  light1:
    extends: http://vwf.example.com/light.vwf
    properties:
      lightType: "directional"
      translation: [ 0.0, 5.0, 5.0 ]
      rotation: [ 1.0, 1.0, 0.0, 36.0 ]
  light2:
    extends: http://vwf.example.com/light.vwf
    properties:
      lightType: "directional"
      translation: [ 0.0, -5.0, 5.0 ]
      rotation: [ 1.0, 1.0, 0.0, 36.0 ]
  camera:
    extends: "http://vwf.example.com/camera.vwf"
    properties:
scripts:
- |
    var vwf_node3 = {
      extends: "http://vwf.example.com/node3.vwf",
      source: "models/xyzbar.dae",
      type: "model/vnd.collada+xml",
      // implements: ["http://vwf.example.com/path/to/behavior.vwf"],
      properties: {
        translation: [ 0.0, 0.0, 2.0 ],
        rotation: [ 0.0, 0.0, -1.0, 90.0 ],
        scale: [ 1.0, 1.0, 1.0 ]
      },
      methods: {
        positionWeapon: undefined,
        selectorLever: undefined,
        selectorLeverSemi: undefined,
        selectorLeverSafe: undefined,
        selectorLeverBurst: undefined,
        magazineCatch: undefined,
        magazine: undefined
      },
      children: {
        M4_Carbine: {
          extends: "http://vwf.example.com/node3.vwf",
          children: {
            Selector_Lever: {
              extends: "http://vwf.example.com/node3.vwf",
            },
            Magazine_Catch: {
              extends: "http://vwf.example.com/node3.vwf"
            },
            Magazine_Catch_Button: {
              extends: "http://vwf.example.com/node3.vwf"
            },
            Tube: {
              extends: "http://vwf.example.com/node3.vwf"
            },
            Base: {
              extends: "http://vwf.example.com/node3.vwf"
            }
          }
        }
      },
      scripts: [
        "this.positionWeapon = function() {\
          console.info('positioning weapon facing down range');\
          this.rotation = [ 0.0, 0.0, 1.0, 0.0 ];\
        }",
        "this.selectorLever = function() {\
          console.info('selector lever activated');\
        }",
        "this.selectorLeverSemi = function() {\
          console.info('selector lever to semi');\
          this.M4_Carbine.Selector_Lever.rotation = [ 0.0, 1.0, 0.0, 0.0 ];\
        }",
        "this.selectorLeverSafe = function() {\
          console.info('selector lever to safe');\
          this.M4_Carbine.Selector_Lever.rotation = [ 0.0, 1.0, 0.0, 90.0 ];\
        }",
        "this.selectorLeverBurst = function() {\
          console.info('selector lever to burst');\
          this.M4_Carbine.Selector_Lever.rotation = [ 0.0, -1.0, 0.0, 90.0 ];\
        }",
        "this.magazineCatch = function() {\
          console.info('magazine catch pushed');\
          this.M4_Carbine.Magazine_Catch.translateTo([ 0.0, 0.00395, 0.0 ], 0.125);\
          this.M4_Carbine.Magazine_Catch_Button.translateTo([ 0.0, 0.00395, 0.0 ], 0.125);\
        }",
        "this.magazine = function() {\
          console.info('magazine removed');\
          this.M4_Carbine.Magazine_Catch.translateTo([ 0.0, -0.0018, 0.0 ], 0.125);\
          this.M4_Carbine.Magazine_Catch_Button.translateTo([ 0.0, -0.0018, 0.0 ], 0.125);\
          this.M4_Carbine.Tube.translateTo([ 0.0, 0.0, -0.125 ], 0.25);\
          this.M4_Carbine.Base.translateTo([ 0.0, 0.0, -0.125 ], 0.25);\
        }"
      ]
    };

    this.initialize = function() {
      this.zoomedValue = 0.0;
      this.scaled = 0.0;
      this.future(0).initializeCamera();
    };

    this.initializeCamera = function() {
      this.camera.translation = [ -1.25, 0.0, 2.0 ];
      // this.camWorldPosition = [ this.camera.translation[ 0 ], this.camera.translation[ 1 ], this.camera.translation[ 2 ] ];
      this.camera.rotation = [ 0.0, 0.0, 1.0, -90.0 ];
    };

    this.zoom = function(value) {
      console.info('zoom ' + value);

      var EPS = 0.00001;
      var scale = 1.0 - value / 100.0; // normalize the value
      var tmp = scale;

      if (this.zoomedValue > 0.0) {
        if (value < EPS) {
          scale = (1.0 / this.scaling);
          this.scaling = 0.0;
          value = 0.0;
        } else {
          scale = (1.0 / this.scaling) * tmp;
          this.scaling = tmp;
        }
      } else {
        this.scaling = scale;
      }

      this.zoomedValue = value;
      console.info('scale: ' + scale + ', scaling: ' + this.scaling);
      // Note: assuming target is the origin for now!
      var x = this.camera.translation[0];
      var y = this.camera.translation[1];
      var z = this.camera.translation[2]; // we keep the z as the target z
      var theta = Math.atan2(x, y); // radians
      var phi = Math.atan2(Math.sqrt(x * x + y * y), 0.0); // radians
      var radius = Math.sqrt(x * x + y * y) * scale;

      console.info('radius: ' + radius);
      x = radius * Math.sin(phi) * Math.sin(theta);
      y = radius * Math.sin(phi) * Math.cos(theta);
      console.info('new translation x ' + x + ', y ' + y + ', z ' + z);
      // this.camera.translation = [ x, y, z ];
      this.camera.translateTo([ x, y, z ], 0.125);
    };

    this.orbit = function(theta) {
      console.info('orbit ' + theta + ' degrees');

      // Note: assuming target is the origin for now!
      var x = this.camera.translation[0];
      var y = this.camera.translation[1];
      var z = this.camera.translation[2];
      var theta = theta * (Math.PI / 180.0);

      console.info('offset x ' + x + ', y ' + y + ', z ' + z);
      var phi = Math.atan2(Math.sqrt(x * x + y * y), z); // radians
      var radius = Math.sqrt(x * x + y * y + z * z); // again the origin is the target

      console.info('theta: ' + theta + ', phi: ' + phi + ' radians, ' + 'radius: ' + radius);
      x = radius * Math.sin(phi) * Math.sin(theta);
      y = radius * Math.sin(phi) * Math.cos(theta);
      z = radius * Math.cos(phi);
      console.info('new offset x ' + x + ', y ' + y + ', z ' + z);
      this.camera.translation = [ x, y, z ];
      console.info('target theta ' + theta * (180.0 / Math.PI));
      console.info('cam rot quat z2, z3 ' + this.camera.rotation[ 2 ] + ', ' + this.camera.rotation[ 3 ]);
      this.future(0).lookAt(this.camTarget);
    };

    this.clearLookAt = function() {
      this.camera.lookAt = null;
    };

    this.lookAt = function(what) {
      this.camera.lookAt = this[what].id;
      this.future(0).clearLookAt();
      console.info('cam rot quat z2, z3 ' + this.camera.rotation[ 2 ] + ', ' + this.camera.rotation[ 3 ]);
    };

    this.instance = function() {
      console.info('instancing tool tray item ' + arguments[ 0 ] + ', ' + arguments[ 1 ]);

      var msg = "The M4 is ready, select your next action";
      $('#actionMsg').text(msg);

      vwf_node3.source = arguments[ 1 ];
      this.children.create(arguments[ 0 ], vwf_node3);
      this.camTarget = arguments[ 0 ];
      this.activity('INSTANCE'); //XXX change this!!!!
    }; //@ sourceURL=index.vwf
