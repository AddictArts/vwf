--- 
properties:
  M4_Carbine_KbId: 'unknown'
  Selector_Lever_KbId: 'unknown'
  Magazine_Catch_KbId: 'unknown'
  Tube_KbId: 'unknown'
  magReleased: false
methods:
  init:
  positionWeapon:
  selectorLever:
  selectorLeverSemi:
  selectorLeverSafe:
  selectorLeverBurst:
  magazineCatch:
  magazine:
scripts:
- |
  // Don't use initialize() like you might want to...this is implemented behavior for a JavaScript created component.
  // Since this init depends on another implemented behavior that could be loaded before this and may fix the
  // undefined reference error, I will just handle init myself. I did not test the order in the array of implements theory.
  this.init = function() {
    console.info('M4_Carbine init');
    this.M4_Carbine_KbId = this.parent.__m4KbId;

    var self = this;
    var count = self.M4_Carbine.children.length;
    var comps = [ ];

    for (var i = 0; i < count; i++) {
      var name = self.M4_Carbine.children[i].name;

      if (self[ name + '_KbId' ]) comps.push(name);
    }

    self.ask(
      { type: 'KbId', parent: self.M4_Carbine_KbId, query: comps },
      function(data) {
        console.info("init ask received data " + JSON.stringify(data));

        for (var i = 0; i < data.KbIds.length; i++) {
          self[ comps[ i ] + '_KbId' ] = data.KbIds[ i ];
        }
      }
    );
  };

  this.positionWeapon = function() {
    console.info('positioning weapon facing down range');
    this.rotation = [ 0, 0, 1, 0 ];
    this.activity({ action: 'PointWeaponInSafeDirection', arguments: [ this.M4_Carbine_KbId ] });
  };

  this.selectorLever = function() {
    console.info('selector lever activated');
    // this.activity({ action: 'Select', arguments: [ this.M4_Carbine_KbId, this.Selector_Lever_KbId ] });
  };

  this.selectorLeverSemi = function() {
    console.info('selector lever to semi');
    this.M4_Carbine.Selector_Lever.rotation = [ 0, 1, 0, 0 ];
    this.activity({ action: 'SelectMode', arguments: [ this.M4_Carbine_KbId, 'Semi' ] });
  };

  this.selectorLeverSafe = function() {
    console.info('selector lever to safe');
    this.M4_Carbine.Selector_Lever.rotation = [ 0, 1, 0, 90 ];
    this.activity({ action: 'SelectMode', arguments: [ this.M4_Carbine_KbId, 'Safe' ] });
  };

  this.selectorLeverBurst = function() {
    console.info('selector lever to burst');
    this.M4_Carbine.Selector_Lever.rotation = [ 0, -1, 0, 90 ];
    this.activity({ action: 'SelectMode', arguments: [ this.M4_Carbine_KbId, 'Burst' ] });
  };

  this.magazineCatch = function() {
    console.info('magazine catch pushed');
    this.M4_Carbine.Magazine_Catch.translateTo([ 0, 0.00395, 0 ], 0.125);
    this.M4_Carbine.Magazine_Catch_Button.translateTo([ 0, 0.00395, 0 ], 0.125);
    this.magReleased = true;
    this.activity({ action: 'PushMagazineReleaseButton', arguments: [ this.M4_Carbine_KbId ] });
  };

  this.magazine = function() {
    if (this.magReleased) {
      console.info('magazine removed');
      this.M4_Carbine.Magazine_Catch.translateTo([ 0, 0, 0 ], 0.125); // back to world origin since object has no local coordinates
      this.M4_Carbine.Magazine_Catch_Button.translateTo([ 0, 0, 0 ], 0.125); // back to world origin since object has no local coordinates
      this.M4_Carbine.Tube.translateTo([ 0, 0, -0.125 ], 0.25);
      this.M4_Carbine.Base.translateTo([ 0, 0, -0.125 ], 0.25);
    }

    // this.activity({ action: 'Remove', arguments: [ this.M4_Carbine_KbId ] });
  }; //@ sourceURL=M4_Carbine.ux
