--- 
properties:
  M4_Carbine_KbId: 'unknown'
  __idToName:
events:
  pointerUp:
  pointerDown:
  pointerMove:
methods:
  init:
  dispatchPick:
  PointWeaponInSafeDirection:
  SelectModeSemi:
  SelectModeSafe:
  SelectModeBurst:
  PushMagazineReleaseButton:
  PullAndHoldChargingHandle:
  PushAndHoldBoltCatchBottom:
  ReleaseChargingHandle:
  LetGoOfBoltCatchBottom:
  PushChargingHandleForward:
  CheckChamberAndReceiverForAmmo:
  PushBoltCatchTop:
  PullTrigger:
  releaseTrigger:
  assessment:
scripts:
- |
  // Don't use initialize() like you might want to...this is implemented behavior for a JavaScript created component.
  // Since this init depends on another implemented behavior that could be loaded before this and may fix the
  // undefined reference error, I will just handle init myself. I did not test the order in the array of implements theory.
  this.init = function() {
    console.info('M4_Carbine init');
    this.M4_Carbine_KbId = this.parent.__m4KbId;
    this.__idToName = { };
    this.__idToName[ this.id ] = this.name;

    var self = this;
    var count = self.children.length;
    var comps = [ ];

    for (var i = 0; i < count; i++) {
      var child = self.children[ i ]; 
      var name = child.name;
      var id = child.id;

      self.__idToName[ id ] = name;

      if (self[ name + '_KbId' ]) comps.push(name);
    }

    console.log(self.__idToName);
    self.checkServerAddress(); // set the server address for the interfaces and set from parent if we need to

    self.ask(
      { type: 'KbId', parent: self.M4_Carbine_KbId, query: comps },
      function(data) {
        console.info("init ask received data " + JSON.stringify(data));

        for (var i = 0; i < data.KbIds.length; i++) {
          self[ comps[ i ] + '_KbId' ] = data.KbIds[ i ];
        }
      }
    );
  };

  this.dispatchPick = function(who) {
    switch(who) {
    case 'M4_Carbine_dae':
      console.info('M4_Carbine_dae pick');
      this.PointWeaponInSafeDirection();
      break;
    case 'Selector_Lever':
      console.info('Selector_Lever pick');
      // XXX this.SelectMode...();
      break;
    case 'Magazine_Catch':
    case 'Magazine_Catch_Button':
      console.info('Magazine_Catch pick');
      this.PushMagazineReleaseButton();
      break;
    };
  };

  this.pointerUp = function(pointerInfo, pickInfo) {
    console.info("M4_Carbine.ux pointerUp");
  };

  this.pointerDown = function(pointerInfo, pickInfo) {
    console.info("M4_Carbine.ux pointerDown");
    console.log(pickInfo);
    this.dispatchPick(this.__idToName[ pickInfo.pickID ]);
    // M4_Carbine.ux pointerDown M4_Carbine.ux:38
    // Object {pickID: "index-vwf:6-80-M4_Carbine_dae:8-76-Selector_Lever", pointerVector: Array[3], position: Array[16], normal: Array[3], source: Array[3]â€¦}
    // distance: 0.5202645488640165
    // globalNormal: Array[3]
    // globalPosition: Array[3]
    // globalSource: Array[3]
    // normal: Array[3]
    // pickID: "index-vwf:6-80-M4_Carbine_dae:8-76-Selector_Lever"
    // pointerVector: Array[3]
    // position: Array[16]
    // source: Array[3]
    // __proto__: Object
  };

  this.pointerMove = function(pointerInfo, pickInfo) {
    console.info("M4_Carbine.ux pointerMove, just for drag, should be pointerDrag");
  };

  this.PointWeaponInSafeDirection = function() {
    console.info('PointWeaponInSafeDirection facing down range');
    this.rotation = [ 0, 0, 1, 0 ];
    this.activity({ action: 'PointWeaponInSafeDirection', arguments: [ this.M4_Carbine_KbId ] });
  };

  this.SelectModeSemi = function() {
    console.info('SelectMode semi');
    this.Selector_Lever.rotation = [ 0, 1, 0, 0 ];
    this.activity({ action: 'SelectMode', arguments: [ this.M4_Carbine_KbId, 'Semi' ] });
  };

  this.SelectModeSafe = function() {
    console.info('SelectMode safe');
    this.Selector_Lever.rotation = [ 0, 1, 0, 90 ];
    this.activity({ action: 'SelectMode', arguments: [ this.M4_Carbine_KbId, 'Safe' ] });
  };

  this.SelectModeBurst = function() {
    console.info('SelectMode burst');
    this.Selector_Lever.rotation = [ 0, -1, 0, 90 ];
    this.activity({ action: 'SelectMode', arguments: [ this.M4_Carbine_KbId, 'Burst' ] });
  };

  this.PushMagazineReleaseButton = function() {
    console.info('PushMagazineReleaseButton pushed and released');
    this.Magazine_Catch.translateTo([ 0, 0.0026, 0 ], 0.125); // back to world origin since object has no local pivot
    this.Magazine_Catch_Button.translateTo([ 0, 0.0026, 0 ], 0.125); // back to world origin since object has no local pivot
    this.Tube.translateTo([ 0, 0, -0.125 ], 0.25);
    this.Base.translateTo([ 0, 0, -0.125 ], 0.25);
    this.Clip_Spring.translateTo([ 0, 0, -0.125 ], 0.25);
    this.Clip_Spring1.translateTo([ 0, 0, -0.125 ], 0.25);
    this.activity({ action: 'PushMagazineReleaseButton', arguments: [ this.M4_Carbine_KbId ] });
  };

  this.PullAndHoldChargingHandle = function() {
    console.info('PullAndHoldChargingHandle pulled');
    this.Charging_Handle.translateTo([ -0.005, 0, 0 ], 0.25);
    this.activity({ action: 'PullAndHoldChargingHandle', arguments: [ this.M4_Carbine_KbId ] });
  };

  this.PushAndHoldBoltCatchBottom = function() {
    console.info('PushAndHoldBoltCatchBottom pushed');
    this.Bolt_Catch.rotation = [ 1, 0, 0, 12 ];
    this.activity({ action: 'PushAndHoldBoltCatchBottom', arguments: [ this.M4_Carbine_KbId ] });
  };

  this.ReleaseChargingHandle = function() {
    console.info('ReleaseChargingHandle released');
    this.Charging_Handle.translateTo([ 0., 0, 0 ], 0.25);
    this.activity({ action: 'ReleaseChargingHandle', arguments: [ this.M4_Carbine_KbId ] });
  };

  this.LetGoOfBoltCatchBottom = function() {
    console.info('LetGoOfBoltCatchBottom let go');
    this.Bolt_Catch.rotation = [ 1, 0, 0, 0 ];
    this.activity({ action: 'LetGoOfBoltCatchBottom', arguments: [ this.M4_Carbine_KbId ] });
  };

  this.PushChargingHandleForward = function() {
    console.info('PushChargingHandleForward');
    this.Charging_Handle.translateTo([ 0.005, 0, 0 ], 0.25);
    this.activity({ action: 'PushChargingHandleForward', arguments: [ this.M4_Carbine_KbId ] });
  };

  this.CheckChamberAndReceiverForAmmo = function() {
    console.info('CheckChamberAndReceiverForAmmo');
    // this.Key_and_Bolt_Carrier_Assembly.translateTo([ 0, 0, 0 ], 0.25);
    // this.Ejection_Port_Cover.rotation = [ 1, 0, 0, 130 ];
    this.Ejection_Port_Cover.rotateTo([ 1, 0, 0, 130 ], 0.5);
    // this.Ejection_Port_Cover.translateTo([ 0, 0, 0 ], 0.25);
    // this..translateTo([ 0, 0, 0 ], 0.25);
    // this..translateTo([ 0, 0, 0 ], 0.25);
    // this..translateTo([ 0, 0, 0 ], 0.25);
    // this.Extractor.translateTo([ 0, 0, 0 ], 0.25);
    // this..translateTo([ 0, 0, 0 ], 0.25);
    this.activity({ action: 'CheckChamberAndReceiverForAmmo', arguments: [ this.M4_Carbine_KbId ] });
  };

  this.PushBoltCatchTop = function() {
    console.info('PushBoltCatchTop');
  //   this..rotation = [ 1, 0, 0, 12 ];
  //   this..translateTo([ 0, 0, 0 ], 0.25);
    this.activity({ action: 'PushBoltCatchTop', arguments: [ this.M4_Carbine_KbId ] });
  };

  this.PullTrigger = function() {
    console.info('PullTrigger ');
    this.Trigger.rotateTo([ 0, 1, 0, 15 ], 0.5);
    this.activity({ action: 'PullTrigger', arguments: [ this.M4_Carbine_KbId ] });
    this.future(1).releaseTrigger();
  };

  this.releaseTrigger = function() {
    this.Trigger.rotateTo([ 0, 1, 0, 0 ], 0.125);
  };

  this.assessment = function() {
    jQuery('<iframe/>', {
      name: 'assessment',
      id:   'assessmentIFrame',
      src: this.parent.assessmentServerAddress
    }).appendTo('#assessment');
    //jQuery('#assessment').html("<h1>Assessment</h1>");
    // this.activity({ action: 'Remove', arguments: [ this.M4_Carbine_KbId ] });
  }; //@ sourceURL=M4_Carbine.ux
