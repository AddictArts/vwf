--- 
properties:
  M4_Carbine_KbId: 'unknown'
  __idToMethod:
events:
  pointerUp:
  pointerDown:
  pointerMove:
methods:
  init:
  positionWeapon:
  selectorLever:
  selectorLeverSemi:
  selectorLeverSafe:
  selectorLeverBurst:
  magazineCatch:
  PullAndHoldChargingHandle:
  PushAndHoldBoltCatchBottom:
  ReleaseChargingHandle:
  assessment:
scripts:
- |
  // Don't use initialize() like you might want to...this is implemented behavior for a JavaScript created component.
  // Since this init depends on another implemented behavior that could be loaded before this and may fix the
  // undefined reference error, I will just handle init myself. I did not test the order in the array of implements theory.
  this.init = function() {
    console.info('M4_Carbine init');
    this.M4_Carbine_KbId = this.parent.__m4KbId;

    var self = this;
    var count = self.children.length;
    var comps = [ ];

    for (var i = 0; i < count; i++) {
      var name = self.children[i].name;

      if (self[ name + '_KbId' ]) comps.push(name);
    }

    self.ask(
      { type: 'KbId', parent: self.M4_Carbine_KbId, query: comps },
      function(data) {
        console.info("init ask received data " + JSON.stringify(data));

        for (var i = 0; i < data.KbIds.length; i++) {
          self[ comps[ i ] + '_KbId' ] = data.KbIds[ i ];
        }
      }
    );

    this.__idToMethod = { };
  };

  this.pointerUp = function(pointerInfo, pickInfo) {
    console.info("M4_Carbine.ux pointerUp");
  };

  this.pointerDown = function(pointerInfo, pickInfo) {
    console.info("M4_Carbine.ux pointerDown");
    console.log(pickInfo);

    // M4_Carbine.ux pointerDown M4_Carbine.ux:38
    // Object {pickID: "index-vwf:6-80-M4_Carbine_dae:8-76-Selector_Lever", pointerVector: Array[3], position: Array[16], normal: Array[3], source: Array[3]â€¦}
    // distance: 0.5202645488640165
    // globalNormal: Array[3]
    // globalPosition: Array[3]
    // globalSource: Array[3]
    // normal: Array[3]
    // pickID: "index-vwf:6-80-M4_Carbine_dae:8-76-Selector_Lever"
    // pointerVector: Array[3]
    // position: Array[16]
    // source: Array[3]
    // __proto__: Object
  };

  this.pointerMove = function(pointerInfo, pickInfo) {
    console.info("M4_Carbine.ux pointerMove, just for drag, should be pointerDrag");
  };

  this.positionWeapon = function() {
    console.info('positioning weapon facing down range');
    this.rotation = [ 0, 0, 1, 0 ];
    this.activity({ action: 'PointWeaponInSafeDirection', arguments: [ this.M4_Carbine_KbId ] });
  };

  this.selectorLever = function() {
    console.info('selector lever activated');
    // this.activity({ action: 'Select', arguments: [ this.M4_Carbine_KbId, this.Selector_Lever_KbId ] });
  };

  this.selectorLeverSemi = function() {
    console.info('selector lever to semi');
    this.Selector_Lever.rotation = [ 0, 1, 0, 0 ];
    this.activity({ action: 'SelectMode', arguments: [ this.M4_Carbine_KbId, 'Semi' ] });
  };

  this.selectorLeverSafe = function() {
    console.info('selector lever to safe');
    this.Selector_Lever.rotation = [ 0, 1, 0, 90 ];
    this.activity({ action: 'SelectMode', arguments: [ this.M4_Carbine_KbId, 'Safe' ] });
  };

  this.selectorLeverBurst = function() {
    console.info('selector lever to burst');
    this.Selector_Lever.rotation = [ 0, -1, 0, 90 ];
    this.activity({ action: 'SelectMode', arguments: [ this.M4_Carbine_KbId, 'Burst' ] });
  };

  this.magazineCatch = function() {
    console.info('magazine catch pushed and released');
    this.Magazine_Catch.translateTo([ 0, 0.0026, 0 ], 0.125); // back to world origin since object has no local pivot
    this.Magazine_Catch_Button.translateTo([ 0, 0.0026, 0 ], 0.125); // back to world origin since object has no local pivot
    this.Tube.translateTo([ 0, 0, -0.125 ], 0.25);
    this.Base.translateTo([ 0, 0, -0.125 ], 0.25);
    this.Clip_Spring.translateTo([ 0, 0, -0.125 ], 0.25);
    this.Clip_Spring1.translateTo([ 0, 0, -0.125 ], 0.25);
    this.activity({ action: 'PushMagazineReleaseButton', arguments: [ this.M4_Carbine_KbId ] });
  };

  this.PullAndHoldChargingHandle = function() {
    console.info('PullAndHoldChargingHandle pulled');
    this.Charging_Handle.translateTo([ -0.005, 0, 0 ], 0.25);
    this.activity({ action: 'PullAndHoldChargingHandle', arguments: [ this.M4_Carbine_KbId ] });
  };

  this.PushAndHoldBoltCatchBottom = function() {
    console.info('PushAndHoldBoltCatchBottom pushed');
    this.Bolt_Catch.rotation = [ 1, 0, 0, 12 ];
    this.activity({ action: 'PushAndHoldBoltCatchBottom', arguments: [ this.M4_Carbine_KbId ] });
  };

  this.ReleaseChargingHandle = function() {
    console.info('ReleaseChargingHandle released');
    this.Charging_Handle.translateTo([ 0., 0, 0 ], 0.25);
    this.activity({ action: 'ReleaseChargingHandle', arguments: [ this.M4_Carbine_KbId ] });
  };

  this.assessment = function() {
    jQuery('<iframe/>', {
      name: 'assessment',
      id:   'assessmentIFrame',
      src: 'http://localhost:3001/M4clear/assessment'
    }).appendTo('#assessment');
    //jQuery('#assessment').html("<h1>Assessment</h1>");
    // this.activity({ action: 'Remove', arguments: [ this.M4_Carbine_KbId ] });
  }; //@ sourceURL=M4_Carbine.ux
