# Copyright 2014, SRI International
---
extends: http://vwf.example.com/scene.vwf
implements:
- begin.cat
- backendtxrx.cat
methods:
  initializeCamera:
  resetBackend:
  transformGroupingToNode3:
  vwfChildJsonFromGrouping:
  createObjectParentsForMetaGroups:
  initInstance:
  instance:
properties:
  backendResetSent:
children:
  light1:
    extends: http://vwf.example.com/light.vwf
    properties:
      lightType: "directional"
      translation: [ -0.5, 0, 2 ]
      rotation: [ 0, 1, 0, 36 ]
  light2:
    extends: http://vwf.example.com/light.vwf
    properties:
      lightType: "ambient"
scripts:
- |
  this.initialize = function() {
    this.backendResetSent = false;
    this.future(0).initializeCamera();
  };

  this.initializeCamera = function() {
    this.camera.translation = [ -1.25, 0, 2.2 ];
    this.camera.rotation = [ 0, 0, 1, -90 ];
  };

  this.resetBackend = function() {
    var self = this;

    this.query({ type: 'Reset' },
      function() {
        self.backendResetSent = true;
      }
    );
  };

  this.transformGroupingToNode3 = function(obj, node3) {
    var self = this;

    for (var p in obj) {
      if (p == 'groups') {
        obj.groups.forEach(function(group) {
          var children = node3;

          if (group.node) {
              node3.children[ group.node ] = { extends: "http://vwf.example.com/node3.vwf", children: { } };
              children = node3.children[ group.node ];
          }

          self.transformGroupingToNode3(group, children);
        });
      } else if (p == 'parts') {
        obj.parts.forEach(function(part) {
            node3.children[ part ] = { extends: "http://vwf.example.com/node3.vwf" };
        });
      }
    }

    return node3;
  };

  this.vwfChildJsonFromGrouping = function(data) {
    var self = this;
    var grouping, name, vwf_node3;

    if (data.grouping !== undefined) {
      grouping = JSON.parse(data.grouping);
    } else {        
      console.warn(self.id + ' object instance request returned undefined grouping');
      grouping = { name: undefined };
    }

    // vwf include might be better? var tt = { "includes": "tool.vwf" } ... this.children.create("tool", tt, function( child ) { ... });
    vwf_node3 = self.transformGroupingToNode3(grouping, {
      extends: "http://vwf.example.com/node3.vwf",
      source: data.assetURL,
      type: "model/vnd.collada+xml",
      implements: [ 'catNode3.vwf', 'backendtxrx.cat' ], // => base behavior, and properties
      properties: { },
      children: { },
      grouping: grouping.name
    });
    name = vwf_node3.grouping.replace(' ', '_') + '_dae'; // => ex: ShootingRange -> ShootingRange_dae

    self.children.create(name, vwf_node3, function(child) {
      self.initInstance(name, data.KbId);
      self.createObjectParentsForMetaGroups(grouping, self.children[ name ]);
    });
  };

  this.createObjectParentsForMetaGroups = function(obj, parent) {
    var self = this;

    for (var p in obj) {
      if (p == 'groups') {
        obj.groups.forEach(function(group) {
          if (group.name && group.node === undefined) {
            // console.log(group.name);
            parent.children.create(group.name, { extends: "http://vwf.example.com/node3.vwf" }, function(child) {
              // console.log(child);
              if (group.parts) group.parts.forEach(function(part) {
                console.info('Object parent:' + group.name + ' parenting part:' + part + ' to it');

                var partNode = self.find('//' + part)[ 0 ];

                // console.log('partNode:'); console.log(partNode);
                partNode.parent_ = child;
              });

              if (group.groups) {
                console.info('Group:' + group.name + ' has ' + group.groups.length  + ' groups');
                self.createObjectParentsForMetaGroups(group, child);
              }
            });
          }
        });
      }
    }
  };

  this.initInstance = function(name, kbid) {
    this.children[ name ].init(kbid);
    return name;
  };

  this.instance = function(name, backEndId) {
    console.info(this.id + ' instancing tool tray item with name:' + name  + ' id:' + backEndId);

    var self = this;

    self.obj({ type: 'create', ID: backEndId }, function(data) {
      console.info(self.id + ' obj request received data.kbid: ' + data.KbId + ' assetURL: ' + data.assetURL);
      self.vwfChildJsonFromGrouping(data);
    });
  }; //# sourceURL=index.vwf
